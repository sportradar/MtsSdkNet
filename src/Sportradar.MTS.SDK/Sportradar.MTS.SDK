<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sportradar.MTS.SDK</name>
    </assembly>
    <members>
        <member name="T:Sportradar.MTS.SDK.API.IConnectionStatus">
            <summary>
            Defines a contract for classes providing information on connection to rabbit server
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.IConnectionStatus.ConnectionChange">
            <summary>
            Occurs when connection status change
            </summary>
            <remarks>On disconnection all ticket sending is disabled. Event ticket creation should be omitted to avoid having old ticket timestamp.</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IConnectionStatus.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IConnectionStatus.ConnectionTime">
            <summary>
            Gets the time of when connection was made.
            </summary>
            <value>The connection time.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IConnectionStatus.DisconnectionTime">
            <summary>
            Gets the time of disconnection.
            </summary>
            <value>The disconnection time.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IConnectionStatus.LastSendTicketId">
            <summary>
            Gets the last send ticket identifier.
            </summary>
            <value>The last send ticket identifier.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IConnectionStatus.LastReceivedTicketId">
            <summary>
            Gets the last received ticket identifier.
            </summary>
            <value>The last received ticket identifier.</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.ICustomBetManager">
            <summary>
            Defines methods used to perform various custom bet operations
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ICustomBetManager.GetAvailableSelectionsAsync(System.String)">
            <summary>
            Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IAvailableSelections"/> instance providing the available selections for the event associated with the provided <see cref="T:System.String"/> identifier
            </summary>
            <param name="eventId">The <see cref="T:System.String"/> identifier of the event for which the available selections should be returned</param>
            <returns>An <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IAvailableSelections"/> providing the the available selections of the associated event</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ICustomBetManager.CalculateProbabilityAsync(System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection})">
            <summary>
            Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ICalculation"/> instance providing the probability for the specified selections
            </summary>
            <param name="selections">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing selections for which the probability should be calculated</param>
            <returns>An <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ICalculation"/> providing the the probability for the specified selections</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.ICustomBetManager.CustomBetSelectionBuilder">
            <summary>
            Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to build selections
            </summary>
            <returns>An <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to build selections</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.IMtsClientApi">
            <summary>
            Defines a contract used to send requests to MTS Client REST API
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsClientApi.GetMaxStakeAsync(Sportradar.MTS.SDK.Entities.Interfaces.ITicket)">
            <summary>
            Gets maximum stake for a ticket
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> to be send</param>
            <returns>Maximum reoffer stake (quantity multiplied by 10000 and rounded to a long value)</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsClientApi.GetMaxStakeAsync(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.String,System.String)">
            <summary>
            Gets maximum stake for a ticket
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> to be send</param>
            <param name="username">A username used for authentication</param>
            <param name="password">A password used for authentication</param>
            <returns>Maximum reoffer stake (quantity multiplied by 10000 and rounded to a long value)</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsClientApi.GetCcfAsync(System.String)">
            <summary>
            Gets customer confidence factor for a customer
            </summary>
            <param name="sourceId">A source ID which identifies a customer</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcf"/> values for sport and prematch/live (if set for customer)</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsClientApi.GetCcfAsync(System.String,System.String,System.String)">
            <summary>
            Gets customer confidence factor for a customer
            </summary>
            <param name="sourceId">A source ID which identifies a customer</param>
            <param name="username">A username used for authentication</param>
            <param name="password">A password used for authentication</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcf"/> values for sport and prematch/live (if set for customer)</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.IMtsSdk">
            <summary>
            Represents a root object of the MTS SDK (to create, send tickets and to handle responses)
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.IMtsSdk.TicketResponseReceived">
            <summary>
            Raised when the current instance of <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk"/> received <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse"/>
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.IMtsSdk.TicketResponseTimedOut">
            <summary>
            Raised when the current instance of <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk"/> did not receive <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse"/> within timeout
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.IMtsSdk.SendTicketFailed">
            <summary>
            Raised when the attempt to send ticket failed
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.IMtsSdk.UnparsableTicketResponseReceived">
            <summary>
            Raised when a message which cannot be parsed is received
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IMtsSdk.BuilderFactory">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory"/> instance used to construct builders with some
            of the properties pre-loaded from the configuration
            </summary>
            <value>The builder factory</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsSdk.SendTicket(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Sends the ticket to the MTS server. The response will raise TicketResponseReceived event.
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> to be send</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsSdk.SendTicketBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicket)">
            <summary>
            Sends the ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsSdk.SendTicketCancelBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel)">
            <summary>
            Sends the cancel ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsSdk.SendTicketCashoutBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout)">
            <summary>
            Sends the cashout ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IMtsSdk.SendTicketNonSrSettleBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle)">
            <summary>
            Sends the non-sr ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse"/></returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IMtsSdk.ClientApi">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.API.IMtsClientApi"/> instance used to send requests to MTS REST API
            </summary>
            <value>The client api</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IMtsSdk.CustomBetManager">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.API.ICustomBetManager" /> instance used to perform various custom bet operations
            </summary>
            <value>The custom bet manager</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IMtsSdk.ReportManager">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.API.IReportManager" /> instance used to get various reports
            </summary>
            <value>The report manager</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.IMtsSdk.ConnectionStatus">
            <summary>
            Gets the connection status.
            </summary>
            <value>The connection status.</value>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.ConnectionChange">
            <summary>
            Occurs when connection status change
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.IsConnected">
            <summary>
            Gets a value indicating whether this instance is connected.
            </summary>
            <value><c>true</c> if this instance is connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.ConnectionTime">
            <summary>
            Gets the time of when last connection was made.
            </summary>
            <value>The connection time.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.DisconnectionTime">
            <summary>
            Gets the time of last disconnection.
            </summary>
            <value>The disconnection time.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.LastSendTicketId">
            <summary>
            Gets the last send ticket identifier.
            </summary>
            <value>The last send ticket identifier.</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionStatus.LastReceivedTicketId">
            <summary>
            Gets the last received ticket identifier.
            </summary>
            <value>The last received ticket identifier.</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult">
            <summary>
            Defines possible reasons for connection failure
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.Success">
            <summary>
            Connection was successfully validated
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.NoInternetConnection">
            <summary>
            The validation failed because the computer is not connected to the internet
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.ConnectionRefused">
            <summary>
            The validation failed because the target computer refueled the connection
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.Unknown">
            <summary>
            The reason for failed validation is not known
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.Message">
            <summary>
            Gets the message associated with the current instance
            </summary>
            <value>The message</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult"/> class
            </summary>
            <param name="message">The message associated with the current instance</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidator">
            <summary>
            Used to validate connection to the message broker
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ConnectionValidator._config">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> instance representing odds configuration
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.ConnectionValidator.#ctor(Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationInternal)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidator"/> class
            </summary>
            <param name="config">A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> instance representing odds configuration</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.ConnectionValidator.ValidateConnection">
            <summary>
            Validates connection to the message broker
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidationResult"/> enum member specifying the result of validation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.ConnectionValidator.GetPublicIp">
            <summary>
            Gets the public IP of the current machine
            </summary>
            <returns>A <see cref="T:System.Net.IPAddress"/> representing the IP of the current machine or a null reference or a null reference if public IP could not be determined</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.CustomBetManager">
            <summary>
            The run-time implementation of the <see cref="T:Sportradar.MTS.SDK.API.ICustomBetManager"/> interface
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.CustomBetManager.#ctor(Sportradar.MTS.SDK.Entities.Internal.IDataProvider{Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO},Sportradar.MTS.SDK.Entities.Internal.ICalculateProbabilityProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.CustomBetManager"/> class
            </summary>
            <param name="availableSelectionsProvider">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> used to make custom bet API requests</param>
            <param name="calculateProbabilityProvider">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.ICalculateProbabilityProvider"/> used to make custom bet API requests</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings">
            <summary>
            Defines a contract for classes providing channel setting in accordance to MTS recommendations
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.ExchangeName">
            <summary>
            Gets the name of the ticket binding exchange
            </summary>
            <value>The name of the ticket binding exchange</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.ExchangeType">
            <summary>
            The type of exchange on rabbit
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.ChannelQueueName">
            <summary>
            The name of the queue
            </summary>
            <value>The name of the queue</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.RoutingKeys">
            <summary>
            The list of routing keys
            </summary>
            <value>The list of routing keys</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.PublishRoutingKey">
            <summary>
            The list of routing key for publishing
            </summary>
            <value>The list of routing key for publishing</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.HeaderProperties">
            <summary>
            the list of header properties
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.ReplyToRoutingKey">
            <summary>
            The name of the routingKey for reply
            </summary>
            <value>The name of the routingKey for reply</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings.ConsumerTag">
            <summary>
            Gets the consumer tag which will be set on <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel"/>
            </summary>
            <value>The consumer tag</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.JsonDeserializer`1">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1" /> implementation which uses <see cref="T:System.Runtime.Serialization.Json.DataContractJsonSerializer" /> property to deserialize JSON strings
            </summary>
            <typeparam name="T">Specifies the type that can be deserialized</typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.JsonDeserializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte"/> array to T derived instance
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> instance containing data to be deserialized </param>
            <returns>The <code>data</code> deserialized to instance of T</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.JsonDeserializer`1.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte" /> array to a <typeparamref name="T1" /> instance
            </summary>
            <typeparam name="T1">A <typeparamref name="T" /> derived type specifying the target of deserialization</typeparam>
            <param name="stream">A <see cref="T:System.IO.Stream" /> instance containing data to be deserialized</param>
            <returns>The <code>data</code> deserialized to <typeparamref name="T1" /> instance</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.JsonDeserializer`1.Deserialize``1(System.String)">
            <summary>
            Deserialize the specified json string
            </summary>
            <typeparam name="T1">The type to be converted to</typeparam>
            <param name="input">The json containing data to be deserialized</param>
            <returns>T1</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2">
            <summary>
            Defines a contract for mapping between user exposes entities and DTOs
            </summary>
            <typeparam name="TIn">The type of the t in</typeparam>
            <typeparam name="TOut">The type of the t out</typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2.Map(`0)">
            <summary>
            Maps the specified source
            </summary>
            <param name="source">The source</param>
            <returns>TOut</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketResponseMapper`2">
            <summary>
            Defines a contract for mapping between user exposes entities and DTOs
            </summary>
            <typeparam name="TIn">The type of the t in</typeparam>
            <typeparam name="TOut">The type of the t out</typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketResponseMapper`2.Map(`0,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Maps the specified source
            </summary>
            <param name="source">The source</param>
            <param name="correlationId">The correlation id</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
            <returns>TOut</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCancelResponseMapper">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2"/> for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCancelResponseMapper._ticketCancelAckSender">
            <summary>
            The ticket cancel ack sender
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCancelResponseMapper.#ctor(Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCancelResponseMapper"/> class
            </summary>
            <param name="ticketCancelAckSender">The ticket cancel ack sender</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCancelResponseMapper.Map(Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.TicketCancelResponseDTO,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Maps the specified source
            </summary>
            <param name="source">The source</param>
            <param name="correlationId">The correlation id of the response</param>
            <param name="additionalInfo">The additional info regarding this cancel response</param>
            <param name="orgJson">The original json string received from the mts</param>
            <returns>ITicketCancelResponse</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCashoutResponseMapper">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2"/> for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketCashoutResponseMapper.Map(Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.TicketCashoutResponseDTO,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Maps the specified source
            </summary>
            <param name="source">The source</param>
            <param name="correlationId">The correlation id of the response</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketNonSrSettleResponseMapper">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2"/> for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketNonSrSettleResponseMapper.Map(Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.TicketNonSrSettleResponseDTO,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Maps the specified source.
            </summary>
            <param name="source">The source</param>
            <param name="correlationId">The correlation id of the response</param>
            <param name="orgJson">The original json string received from the mts</param>
            <param name="additionalInfo">The additional information</param>
            <returns>TicketNonSrSettleResponse</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketResponseMapper">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.ITicketMapper`2"/> for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Mappers.TicketResponseMapper._ticketSender">
            <summary>
            The ticket ack sender
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketResponseMapper.#ctor(Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.Mappers.TicketResponseMapper"/> class
            </summary>
            <param name="ticketSender">The ticket ack sender</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Mappers.TicketResponseMapper.Map(Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Maps the specified source
            </summary>
            <param name="source">The source</param>
            <param name="correlationId">The correlation id</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
            <returns>ITicketResponse</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.MtsAuth.IMtsAuthService">
            <summary>
            Defines contract for implementing MTS authorization service (via Keycloack)
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.MtsAuth.IMtsAuthService.GetTokenAsync(System.String,System.String)">
            <summary>
            Gets the access token asynchronous.
            </summary>
            <param name="keycloackUsername">The keycloack username.</param>
            <param name="keycloackPassword">The keycloack password.</param>
            <returns>Access token if access granted</returns>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService.ExecutionLog">
            <summary>
            A logger instance used for logging execution logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService.InteractionLog">
            <summary>
            A logger instance used for logging client iteration logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._authorizationDataProvider">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> for getting authorization token
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._keycloackUsername">
            <summary>
            Username used for getting authorization token
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._keycloackPassword">
            <summary>
            Password used for getting authorization token
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._keycloackSecret">
            <summary>
            Secret used for getting authorization token
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._tokenCache">
            <summary>
            Cache for storing authorization tokens
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService._tokenSemaphore">
            <summary>
            Lock for synchronizing access to token cache
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.MtsAuth.MtsAuthService.GetTokenAsync(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.MtsClientApi">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.IMtsClientApi"/> implementation acting as an entry point to the MTS Client API
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsClientApi.ExecutionLog">
            <summary>
            A log4net.ILog instance used for logging execution logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsClientApi.InteractionLog">
            <summary>
            A log4net.ILog instance used for logging client iteration logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsClientApi._maxStakeDataProvider">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> for getting max stake
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsClientApi._ccfDataProvider">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> for getting ccf
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.MtsClientApi._mtsAuthService">
            <summary>
            The MTS authentication service
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory">
            <summary>
            Represents a factory used to construct <see cref="T:RabbitMQ.Client.IModel"/> instances representing channels to the broker
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory._connectionFactory">
            <summary>
            The <see cref="T:RabbitMQ.Client.IConnectionFactory"/> used to construct connections to the broker
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory._lock">
            <summary>
            The object used to ensure thread safety
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory._connection">
            <summary>
            The <see cref="T:RabbitMQ.Client.IConnection"/> representing connection to the broker
            </summary> 
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory._disposed">
            <summary>
            Value indicating whether the current instance has been disposed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory._connectionStatus">
            <summary>
            Gets the connection status.
            </summary>
            <value>The connection status.</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory.#ctor(RabbitMQ.Client.IConnectionFactory,Sportradar.MTS.SDK.API.IConnectionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory"/> class
            </summary>
            <param name="connectionFactory">The connection factory</param>
            <param name="connectionStatus">The connection status</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources;
            <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory.GetUniqueId">
            <summary>
            Gets the unique id channel can use
            </summary>
            <returns>System.Int32</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelFactory.GetChannel(System.Int32)">
            <summary>
            Returns a <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelWrapper"/> containing a channel used to communicate with the broker
            </summary>
            <returns>a <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelWrapper"/> containing a channel used to communicate with the broker</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory">
            <summary>
            A <see cref="T:RabbitMQ.Client.IConnectionFactory"/> implementations which properly configures it self before first <see cref="T:RabbitMQ.Client.IConnection"/> is created
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory._server">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer"/> instance containing server information
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory._configured">
            <summary>
            Value indicating whether the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory"/> was already configured
            0 indicates false; 1 indicates true
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory.#ctor(Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory"/> class
            </summary>
            <param name="server">A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer"/> instance containing server information</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory.Configure">
            <summary>
            Configures the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory"/> based on server options read from <code>_server</code> field
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.ConfiguredConnectionFactory.CreateConnection">
            <summary>
            Create a connection to the specified endpoint.
            </summary>
            <exception cref="T:RabbitMQ.Client.Exceptions.BrokerUnreachableException">When the configured host name was not reachable</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory">
            <summary>
            Represents a factory used to construct Rabbit MQ channels / models
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory.GetUniqueId">
            <summary>
            Gets the unique id channel can use
            </summary>
            <returns>The unique id</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory.GetChannel(System.Int32)">
            <summary>
            Returns a <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelWrapper"/> containing a channel used to communicate with the broker
            </summary>
            <param name="id">Unique id of the channel</param>
            <returns>a <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelWrapper"/> containing a channel used to communicate with the broker</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory.RemoveChannel(System.Int32)">
            <summary>
            Removes the channel
            </summary>
            <param name="id">The identifier</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings">
            <summary>
            Defines a contract for channel settings
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.DeleteQueueOnClose">
            <summary>
            Gets a value indicating whether the queue should be deleted on close
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.QueueIsDurable">
            <summary>
            Gets a value indicating whether created queue is durable
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.UserAcknowledgmentEnabled">
            <summary>
            Gets a value indicating whether user acknowledgment enabled on queue
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.HeartBeat">
            <summary>
            Specifies minimum allowed value of the inactivity value
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.UserAcknowledgmentBatchLimit">
            <summary>
            The user acknowledgment batch limit for received messages
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.UserAcknowledgmentTimeoutInSeconds">
            <summary>
            The user acknowledgment timeout in seconds for received messages
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.UsePersistentDeliveryMode">
            <summary>
            Gets the delivery mode of the publishing channel (persistent or non-persistent)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.PublishQueueLimit">
            <summary>
            Gets the publish queue limit (0 - unlimited)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.PublishQueueTimeoutInMs1">
            <summary>
            Gets the timeout for items in publish queue
            </summary>
            <value>Default 15 seconds</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.PublishQueueTimeoutInMs2">
            <summary>
            Gets the timeout for items in publish queue
            </summary>
            <value>Default 15 seconds</value>
            <remarks>Used only with normal ticket sender (for live and prematch)</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.MaxPublishQueueTimeoutInMs">
            <summary>
            Gets the maximum publish queue timeout in ms
            </summary>
            <value>The maximum publish queue timeout in ms</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings.ExclusiveConsumer">
            <summary>
            Gets a value indicating whether the rabbit consumer channel should be exclusive
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel">
            <summary>
            Represents a contract implemented by classes used to connect to rabbit mq broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel.UniqueId">
            <summary>
            Gets the unique identifier
            </summary>
            <value>The unique identifier</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel.Open(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <param name="routingKeys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the routing keys of the constructed queue</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel.Open(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <param name="queueName"></param>
            <param name="routingKeys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the routing keys of the constructed queue</param>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel.ChannelMessageReceived">
            <summary>
            Occurs when the current channel received the data
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver">
            <summary>
            Defines a contract for AMPQ message receiver
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.IOpenable" />
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver.Open(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <param name="routingKeys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the routing keys of the constructed queue</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver.Open(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <param name="queueName"></param>
            <param name="routingKeys">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the routing keys of the constructed queue</param>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver.MqMessageReceived">
            <summary>
            Occurs when the current channel received the data
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel">
            <summary>
            Represents a contract implemented by classes used to connect to rabbit mq broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel.UniqueId">
            <summary>
            Gets the unique identifier
            </summary>
            <value>The unique identifier</value>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel.MqMessagePublishFailed">
            <summary>
            Raised when the attempt to publish message failed
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel.Publish(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Publishes the specified message
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The message to be published</param>
            <param name="routingKey">The routing key to be set while publishing</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IMqPublishResult"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel.PublishAsync(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Asynchronously publishes the specified message
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The message to be published</param>
            <param name="routingKey">The routing key to be set while publishing</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IMqPublishResult"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer">
            <summary>
            Represents a contract implemented by classes used to connect to rabbit mq broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.Username">
            <summary>
            Gets the username used to connect to server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.Password">
            <summary>
            Gets the password used to connect to server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.UseSsl">
            <summary>
            Gets a value indicating whether to use SSL to connect to server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.SslServerName">
            <summary>
            Gets the server name that will be used to check against SSL certificate
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.VirtualHost">
            <summary>
            Gets the virtual host on the connected server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.Port">
            <summary>
            Gets the port used to connect to server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.HostAddress">
            <summary>
            Gets the address used to connect to server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.AutomaticRecovery">
            <summary>
            Gets a value indicating whether automatic recovery should be set or not
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.HeartBeat">
            <summary>
            Gets the heart beat that should be used on connection (in seconds)
            </summary>
            <value>0 means use default value (default:60)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitServer.ClientProperties">
            <summary>
            Gets the client properties to be added to connection
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel">
            <summary>
            A class used to connect to the Rabbit MQ broker
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel" />
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.UniqueId">
            <summary>
            Gets the unique identifier
            </summary>
            <value>The unique identifier</value>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.ExecutionLog">
            <summary>
            The log4net.ILog used execution logging
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.FeedLog">
            <summary>
            The feed log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel._channelFactory">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory"/> used to construct the <see cref="T:RabbitMQ.Client.IModel"/> representing Rabbit MQ channel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel._isOpened">
            <summary>
            Value indicating whether the current instance is opened. 1 means opened, 0 means closed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel._shouldBeOpened">
            <summary>
            Value indicating whether the current instance should be opened. 1 means yes, 0 means no
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.IsOpened">
            <summary>
            Gets a value indicating whether the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver"/> is currently opened;
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.ChannelMessageReceived">
            <summary>
            Occurs when the current channel received the data
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel._healthTimer">
            <summary>
            The queue timer
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.#ctor(Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory,Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings,Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel"/> class
            </summary>
            <param name="channelFactory">A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory"/> used to construct the <see cref="T:RabbitMQ.Client.IModel"/> representing Rabbit MQ channel</param>
            <param name="mtsChannelSettings"></param>
            <param name="channelSettings"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.OnTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Invoked when the internally used timer elapses
            </summary>
            <param name="sender">A <see cref="T:System.Object" /> representation of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.ITimer" /> raising the event</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.OnDataReceived(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Handles the <see cref="E:RabbitMQ.Client.Events.EventingBasicConsumer.Received"/> event
            </summary>
            <param name="sender">The <see cref="T:System.Object"/> representation of the instance raising the event</param>
            <param name="basicDeliverEventArgs">The <see cref="T:RabbitMQ.Client.Events.BasicDeliverEventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.Open">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel.Close">
            <summary>
            Closes the current channel
            </summary>
            <exception cref="T:System.InvalidOperationException">The instance is already closed</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver" /> implementation using RabbitMQ broker to deliver feed messages
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqMessageReceiver" />
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.FeedLog">
            <summary>
            A log4net.ILog used for feed traffic logging
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver._consumerChannel">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel" /> representing a channel to the RabbitMQ broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.IsOpened">
            <summary>
            Gets a value indicating whether the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> is currently opened;
            </summary>
            <value><c>true</c> if this instance is opened; otherwise, <c>false</c></value>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.MqMessageReceived">
            <summary>
            Event raised when the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel" /> receives the message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.#ctor(Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel,Sportradar.MTS.SDK.Entities.Enums.TicketResponseType)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> class
            </summary>
            <param name="channel">A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqConsumerChannel" /> representing a consumer channel to the RabbitMQ broker</param>
            <param name="expectedResponseType">The type of the message receiver is expecting</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.Consumer_OnMessageReceived(System.Object,RabbitMQ.Client.Events.BasicDeliverEventArgs)">
            <summary>
            Handles the message received event
            </summary>
            <param name="sender">The <see cref="T:System.Object" /> representation of the event sender</param>
            <param name="eventArgs">A <see cref="T:RabbitMQ.Client.Events.BasicDeliverEventArgs" /> containing event information</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.RaiseMessageReceived(System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Raises the <see cref="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.MqMessageReceived" /> event
            </summary>
            <param name="body">The body of the message (json)</param>
            <param name="routingKey">The routing key</param>
            <param name="correlationId">The correlation id</param>
            <param name="additionalInfo">The additional information</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.Open">
            <summary>
            Opens the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.Open(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> instance so it starts receiving messages
            </summary>
            <param name="routingKeys">A list of routing keys specifying which messages should the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> deliver</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.Open(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <param name="queueName">Name of the queue</param>
            <param name="routingKeys">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> specifying the routing keys of the constructed queue</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.Close">
            <summary>
            Closes the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> so it will no longer receive messages
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.RegisterHealthCheck">
            <summary>
            Registers the health check which will be periodically triggered
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver.StartHealthCheck">
            <summary>
            Starts the health check and returns <see cref="T:Metrics.HealthCheckResult" />
            </summary>
            <returns>HealthCheckResult</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel" />
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.UniqueId">
            <summary>
            Gets the unique identifier
            </summary>
            <value>The unique identifier</value>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.MqMessagePublishFailed">
            <summary>
            Raised when the attempt to publish message failed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.ExecutionLog">
            <summary>
            The ILog used execution logging
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.FeedLog">
            <summary>
            The feed log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._channelFactory">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory" /> used to construct the <see cref="T:RabbitMQ.Client.IModel" /> representing Rabbit MQ channel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._isOpened">
            <summary>
            Value indicating whether the current instance is opened. 1 means opened, 0 means closed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._shouldBeOpened">
            <summary>
            Value indicating whether the current instance should be opened. 1 means yes, 0 means no
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.IsOpened">
            <summary>
            Gets a value indicating whether the current <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqMessageReceiver" /> is currently opened;
            </summary>
            <value><c>true</c> if this instance is opened; otherwise, <c>false</c></value>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._mtsChannelSettings">
            <summary>
            The MTS channel settings
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._channelSettings">
            <summary>
            The channel settings
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._useQueue">
            <summary>
            The use queue
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._queueTimeout">
            <summary>
            The queue timeout
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._queueLimit">
            <summary>
            The queue limit
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._msgQueue">
            <summary>
            The MSG queue
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._queueTimer">
            <summary>
            The queue timer
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel._connectionStatus">
            <summary>
            Gets the connection status.
            </summary>
            <value>The connection status.</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.#ctor(Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory,Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings,Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings,Sportradar.MTS.SDK.API.IConnectionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqConsumerChannel" /> class
            </summary>
            <param name="channelFactory">A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IChannelFactory" /> used to construct the <see cref="T:RabbitMQ.Client.IModel" /> representing Rabbit MQ channel</param>
            <param name="mtsChannelSettings">The mts channel settings</param>
            <param name="channelSettings">The channel settings</param>
            <param name="connectionStatus">The connection status</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.OnTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Invoked when the internally used timer elapses
            </summary>
            <param name="sender">A <see cref="T:System.Object" /> representation of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.ITimer" /> raising the event</param>
            <param name="e">The <see cref="T:System.EventArgs" /> instance containing the event data</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.RaiseMessagePublishFailedEvent(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String)">
            <summary>
            Raises the message publish failed event
            </summary>
            <param name="rawData">The raw data</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="routingKey">The routing key</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.Publish(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Publishes the specified message
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The message to be published</param>
            <param name="routingKey">The routing key to be set while publishing</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IMqPublishResult" /></returns>
            <exception cref="T:System.InvalidOperationException">The instance is closed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.PublishAsync(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Publish message as an asynchronous operation
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The message to be published</param>
            <param name="routingKey">The routing key to be set while publishing</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.Internal.RabbitMq.IMqPublishResult" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.AddToPublishingQueue(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Adds to publishing queue
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The MSG</param>
            <param name="routingKey">The routing key</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>IMqPublishResult</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.PublishMsg(System.String,System.Byte[],System.String,System.String,System.String)">
            <summary>
            Publishes the MSG
            </summary>
            <param name="ticketId">Ticket Id</param>
            <param name="msg">The MSG</param>
            <param name="routingKey">The routing key</param>
            <param name="correlationId">The correlation identifier</param>
            <param name="replyRoutingKey">The reply routing key</param>
            <returns>IMqPublishResult</returns>
            <exception cref="T:System.InvalidOperationException">The instance is closed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.CheckChannelWrapper(Sportradar.MTS.SDK.API.Internal.RabbitMq.ChannelWrapper)">
            <summary>
            Checks the channel wrapper
            </summary>
            <param name="channelWrapper">The channel wrapper</param>
            <returns><c>true</c> if should return from method, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.Open">
            <summary>
            Opens the current channel and binds the created queue to provided routing keys
            </summary>
            <exception cref="T:System.InvalidOperationException">The instance is already opened</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.RabbitMq.RabbitMqPublisherChannel.Close">
            <summary>
            Closes the current channel
            </summary>
            <exception cref="T:System.InvalidOperationException">The instance is already closed</exception>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager.ExecutionLog">
            <summary>
            A logger instance used for logging execution logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager.InteractionLog">
            <summary>
            A logger instance used for logging client iteration logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager.TimestampFormat">
            <summary>
            The timestamp format
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager._ccfChangeHistoryFetcher">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> for ccf change history
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager._ccfChangeHistoryUri">
            <summary>
            The CCF change history URI
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager._mtsAuthService">
            <summary>
            The MTS authentication service
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.ReportManager._config">
            <summary>
            The configuration
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.SdkConfigurationBuilder.SetUfEnvironment(Sportradar.MTS.SDK.Entities.Enums.UfEnvironment)">
            <summary>
            Sets the uf environment
            </summary>
            <param name="ufEnvironment">The uf environment to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.SdkConfigurationBuilder.SetExclusiveConsumer(System.Boolean)">
            <summary>
            Sets the value indicating whether the rabbit consumer channel should be exclusive
            </summary>
            <param name="exclusiveConsumer">The value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.SdkConfigurationBuilder.SetTicketResponseTimeoutLive(System.Int32)">
            <summary>
            Sets the ticket response timeout(ms)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.SdkConfigurationBuilder.SetTicketResponseTimeoutPrematch(System.Int32)">
            <summary>
            Sets the ticket response timeout(ms)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender">
            <summary>
            Interface ITicketSender
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.IOpenable" />
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender.TicketSendFailed">
            <summary>
            Raised when the attempt to send ticket failed
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender.SendTicket(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Sends the ticket
            </summary>
            <param name="ticket">The ticket</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender.GetSentTicket(System.String)">
            <summary>
            Gets the sent ticket
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <returns>ISdkTicket</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender.GetCacheTimeout(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Gets the get cache timeout
            </summary>
            <value>The get cache timeout</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase">
            <summary>
            Base implementation of the <see cref="T:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender" />
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._executionLog">
            <summary>
            The execution log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._feedLog">
            <summary>
            The feed log
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.TicketSendFailed">
            <summary>
            Raised when the attempt to send ticket failed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._publisherChannel">
            <summary>
            The publisher channel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._ticketCache">
            <summary>
            The ticket cache
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._mtsChannelSettings">
            <summary>
            The MTS channel settings
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._rabbitMqChannelSettings">
            <summary>
            The rabbit mq channel settings
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._timer">
            <summary>
            The timer
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase._isOpened">
            <summary>
            Indication if it is opened or not
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.#ctor(Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqPublisherChannel,System.Collections.Concurrent.ConcurrentDictionary{System.String,Sportradar.MTS.SDK.Entities.Internal.TicketCacheItem},Sportradar.MTS.SDK.API.Internal.IMtsChannelSettings,Sportradar.MTS.SDK.API.Internal.RabbitMq.IRabbitMqChannelSettings)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase"/> class
            </summary>
            <param name="publisherChannel">The publisher channel</param>
            <param name="ticketCache">The ticket cache</param>
            <param name="mtsChannelSettings">The MTS channel settings</param>
            <param name="rabbitMqChannelSettings">Rabbit channel settings</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.OnTimerElapsed(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:TimerElapsed" /> event
            </summary>
            <param name="sender">The sender</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.DeleteExpiredCacheItems">
            <summary>
            Deletes the expired cache items
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.GetMappedDtoJsonMsg(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Gets the mapped dto json MSG
            </summary>
            <param name="sdkTicket">The SDK ticket</param>
            <returns>System.String</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.GetByteMsg(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Gets the byte MSG
            </summary>
            <param name="sdkTicket">The SDK ticket</param>
            <returns>System.Byte[]</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.SendTicket(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Sends the ticket
            </summary>
            <param name="ticket">The <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> to be send</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.GetSentTicket(System.String)">
            <summary>
            Gets the sent ticket
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <returns>ISdkTicket</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.IsOpened">
            <summary>
            Gets a value indicating whether the current instance is opened
            </summary>
            <value><c>true</c> if this instance is opened; otherwise, <c>false</c></value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.Open">
            <summary>
            Opens the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.Close">
            <summary>
            Closes the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.Senders.TicketSenderBase.GetCacheTimeout(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Gets the get cache timeout
            </summary>
            <value>The get cache timeout</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse" />
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse._ticketCancelSender">
            <summary>
            The ticket cancel sender
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
            <value>The reason</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Status">
            <summary>
            Gets the status of the cancellation
            </summary>
            <value>The status</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
            <value>The signature</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.#ctor(Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender,System.String,Sportradar.MTS.SDK.Entities.Enums.TicketCancelAcceptance,Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse"/> class
            </summary>
            <param name="ticketCancelSender">The ticket cancel sender</param>
            <param name="ticketId">The ticket identifier</param>
            <param name="status">The status</param>
            <param name="reason">The reason</param>
            <param name="correlationId">The correlation id</param>
            <param name="signature">The signature</param>
            <param name="version">The version</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Acknowledge(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark canceled]</param>
            <param name="bookmakerId">The sender identifier (bookmakerId)</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <exception cref="T:System.NullReferenceException">Missing TicketCancelSender. Can not be null</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCancelResponse.Acknowledge(System.Boolean)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark canceled]</param>
            <exception cref="T:System.Exception">missing ticket in cache</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse" />
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
            <value>The reason</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
            <value>The signature</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Status">
            <summary>
            Gets the status of the ticket cashout submission
            </summary>
            <value>The status</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.#ctor(System.String,Sportradar.MTS.SDK.Entities.Enums.CashoutAcceptance,Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="status">The status</param>
            <param name="reason">The reason</param>
            <param name="correlationId">The correlation id</param>
            <param name="signature">The signature</param>
            <param name="version">The version</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Acknowledge(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <param name="bookmakerId">The sender identifier (bookmakerId)</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <exception cref="T:System.NullReferenceException">Missing TicketCashoutSender. Can not be null</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketCashoutResponse.Acknowledge(System.Boolean)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <exception cref="T:System.Exception">missing ticket in cache</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse" />
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
            <value>The reason</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
            <value>The signature</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Status">
            <summary>
            Gets the status of the ticket non-sr settle submission
            </summary>
            <value>The status</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.#ctor(System.String,Sportradar.MTS.SDK.Entities.Enums.NonSrSettleAcceptance,Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="status">The status</param>
            <param name="reason">The reason</param>
            <param name="correlationId">The correlation id</param>
            <param name="signature">The signature</param>
            <param name="version">The version</param>
            <param name="additionalInfo">The additional information</param>
            <param name="orgJson">The original json string received from the mts</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Acknowledge(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <param name="bookmakerId">The sender identifier (bookmakerId)</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <exception cref="T:System.NullReferenceException">Missing TicketNonSrSettleSender. Can not be null</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketNonSrSettleResponse.Acknowledge(System.Boolean)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <exception cref="T:System.Exception">missing ticket in cache</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse" />
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse._ticketSender">
            <summary>
            The ticket sender
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Status">
            <summary>
            Gets the status of the ticket submission
            </summary>
            <value>The status</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
            <value>The reason</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.BetDetails">
            <summary>
            Gets the bet details
            </summary>
            <value>The bet details</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
            <value>The signature</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.ExchangeRate">
            <summary>
            Gets the exchange rate used when converting currencies to EUR. Long multiplied by 10000 and rounded to a long value
            </summary>
            <value>The exchange rate</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.AdditionalInfo">
            <summary>
            Gets the additional information
            </summary>
            <value>The additional information</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.AutoAcceptedOdds">
            <summary>
            Gets the automatic accepted odds
            </summary>
            <value>The automatic accepted odds</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse._originalJson">
            <summary>
            The original json
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.#ctor(Sportradar.MTS.SDK.API.Internal.Senders.ITicketSender,System.String,Sportradar.MTS.SDK.Entities.Enums.TicketAcceptance,Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason,System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail},System.String,System.String,System.Int64,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse"/> class
            </summary>
            <param name="ticketSender">The ticket sender</param>
            <param name="ticketId">The ticket identifier</param>
            <param name="status">The status</param>
            <param name="reason">The reason</param>
            <param name="betDetails">The bet details</param>
            <param name="correlationId">The correlation id</param>
            <param name="signature">The signature</param>
            <param name="exchangeRate">The exchange rate</param>
            <param name="version">The version</param>
            <param name="additionalInfo">The additional information</param>
            <param name="autoAcceptedOdds">Auto accepted odds</param>
            <param name="orgJson">The original json string received from the mts</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Acknowledge(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Acknowledges the specified mark accepted.
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <param name="bookmakerId">The sender identifier</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <exception cref="T:System.NullReferenceException">Missing TicketSender. Can not be null</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.Internal.TicketImpl.TicketResponse.Acknowledge(System.Boolean)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <exception cref="T:System.Exception">missing ticket in cache</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.IReportManager">
            <summary>
            Defines methods used to get various reports
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IReportManager.GetHistoryCcfChangeCsvExportAsync(System.IO.Stream,System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int32},System.String,Sportradar.MTS.SDK.Entities.Enums.SourceType,System.String,System.String)">
            <summary>
            Gets the customer ccf (confidence factor history change) CSV output stream for bookmaker with filters
            </summary>
            <param name="outputStream">The output stream to store the result data (in CSV format)</param>
            <param name="startDate">The start date to query changes</param>
            <param name="endDate">The end date to query changes</param>
            <param name="bookmakerId">The bookmaker id - (if not set via configuration)</param>
            <param name="subBookmakerIds">The sub bookmaker ids</param>
            <param name="sourceId">The source identifier.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="username">A username used for authentication - (if not set via configuration - keycloakUsername)</param>
            <param name="password">A password used for authentication - (if not set via configuration - keycloakPassword)</param>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException">If there is exception getting report data</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.IReportManager.GetHistoryCcfChangeCsvExportAsync(System.DateTime,System.DateTime,System.Nullable{System.Int32},System.Collections.Generic.List{System.Int32},System.String,Sportradar.MTS.SDK.Entities.Enums.SourceType,System.String,System.String)">
            <summary>
            Gets the customer ccf (confidence factor history change) as list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange"/> for bookmaker with filters
            </summary>
            <param name="startDate">The start date to query changes</param>
            <param name="endDate">The end date to query changes</param>
            <param name="bookmakerId">The bookmaker id - (if not set via configuration)</param>
            <param name="subBookmakerIds">The sub bookmaker ids</param>
            <param name="sourceId">The source identifier.</param>
            <param name="sourceType">Type of the source.</param>
            <param name="username">A username used for authentication - (if not set via configuration - keycloakUsername)</param>
            <param name="password">A password used for authentication - (if not set via configuration - keycloakPassword)</param>
            <returns>Returns the list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange"/></returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException">If there is exception getting report data</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetUsername(System.String)">
            <summary>
            Sets the username
            </summary>
            <param name="username">The username to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetPassword(System.String)">
            <summary>
            Sets the password
            </summary>
            <param name="password">The password to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetHost(System.String)">
            <summary>
            Sets the host used to connect to AMQP broker
            </summary>
            <param name="host">The host to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetPort(System.Int32)">
            <summary>
            Sets the port used to connect to AMQP broker
            </summary>
            <param name="port">The port to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
            <remarks>Port should be chosen through the UseSsl property. Manually setting port number should be used only when non-default port is required</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetVirtualHost(System.String)">
            <summary>
            Sets the vhost (format: '/vhost')
            </summary>
            <param name="vhost">The vhost to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetNode(System.Int32)">
            <summary>
            Sets the node id
            </summary>
            <param name="nodeId">The node id to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetUseSsl(System.Boolean)">
            <summary>
            Sets the value indicating whether a secure connection to the message broker should be used
            </summary>
            <param name="useSsl">The value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetSslServerName(System.String)">
            <summary>
            Sets the server name that will be used to check against SSL certificate
            </summary>
            <param name="sslServerName">The value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the bookmakerId
            </summary>
            <param name="bookmakerId">The bookmakerId to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetLimitId(System.Int32)">
            <summary>
            Sets the limitId
            </summary>
            <param name="limitId">The limitId to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetCurrency(System.String)">
            <summary>
            Sets the currency
            </summary>
            <param name="currency">The currency to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetSenderChannel(Sportradar.MTS.SDK.Entities.Enums.SenderChannel)">
            <summary>
            Sets the sender channel
            </summary>
            <param name="channel">The channel to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetAccessToken(System.String)">
            <summary>
            Sets the access token
            </summary>
            <param name="accessToken">The accessToken to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetUfEnvironment(Sportradar.MTS.SDK.Entities.Enums.UfEnvironment)">
            <summary>
            Sets the uf environment
            </summary>
            <param name="ufEnvironment">The uf environment to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetProvideAdditionalMarketSpecifiers(System.Boolean)">
            <summary>
            This value is used to indicate if the sdk should add market specifiers for specific markets. Only used when building selection using UnifiedOdds ids. (default: true)
            </summary>
            <param name="provideAdditionalMarketSpecifiers">The value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
            <remarks>If this is set to true and the user uses UOF markets, when there are special cases (market 215, or $score in SOV/SBV template), sdk automatically tries to add appropriate specifier; if set to false, user will need to add this manually</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetExclusiveConsumer(System.Boolean)">
            <summary>
            Sets the value indicating whether the rabbit consumer channel should be exclusive
            </summary>
            <param name="exclusiveConsumer">The value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetKeycloakHost(System.String)">
            <summary>
            Sets the Keycloak host for authorization
            </summary>
            <param name="keycloakHost">The Keycloak host to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetKeycloakUsername(System.String)">
            <summary>
            Sets the username used to connect authenticate to Keycloak
            </summary>
            <param name="keycloakUsername">The username to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetKeycloakPassword(System.String)">
            <summary>
            Sets the password used to connect authenticate to Keycloak
            </summary>
            <param name="keycloakPassword">The password to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetKeycloakSecret(System.String)">
            <summary>
            Sets the secret used to connect authenticate to Keycloak
            </summary>
            <param name="keycloakSecret">The secret to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetMtsClientApiHost(System.String)">
            <summary>
            Sets the Client API host
            </summary>
            <param name="mtsClientApiHost">The Client API host to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetTicketResponseTimeout(System.Int32)">
            <summary>
            Sets the ticket response timeout(ms) (sets both live and prematch timeouts)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetTicketResponseTimeoutLive(System.Int32)">
            <summary>
            Sets the ticket response timeout(ms) for tickets using "live" selectionId
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetTicketResponseTimeoutPrematch(System.Int32)">
            <summary>
            Sets the ticket response timeout(ms) for tickets using "prematch" selectionId
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetTicketCancellationResponseTimeout(System.Int32)">
            <summary>
            Sets the ticket cancellation response timeout(ms)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetTicketCashoutResponseTimeout(System.Int32)">
            <summary>
            Sets the ticket cashout response timeout(ms)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.SetNonSrSettleResponseTimeout(System.Int32)">
            <summary>
            Sets the ticket non-sr settle response timeout(ms)
            </summary>
            <param name="responseTimeout">The timeout in ms to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.API.MtsSdk">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk"/> implementation acting as an entry point to the MTS SDK
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk.ExecutionLog">
            <summary>
            A log4net.ILog instance used for logging execution logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk.InteractionLog">
            <summary>
            A log4net.ILog instance used for logging client iteration logs
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk._connectionValidator">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.API.Internal.ConnectionValidator"/> used to detect potential connectivity issues
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk._unityContainer">
            <summary>
            A <see cref="T:Microsoft.Practices.Unity.IUnityContainer"/> used to resolve
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk._isDisposed">
            <summary>
            Value indicating whether the instance has been disposed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk._isOpened">
            <summary>
            Value indicating whether the current <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk"/> is already opened
            0 indicates false; 1 indicates true
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.IsOpened">
            <summary>
            Gets a value indicating whether the current instance is opened
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.API.MtsSdk._config">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> representing sdk configuration
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.MtsSdk.TicketResponseReceived">
            <summary>
            Raised when the current instance of <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk" /> received <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse" />
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.MtsSdk.TicketResponseTimedOut">
            <summary>
            Raised when the current instance of <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk" /> did not receive <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse" /> within timeout
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.MtsSdk.SendTicketFailed">
            <summary>
            Raised when the attempt to send ticket failed
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.API.MtsSdk.UnparsableTicketResponseReceived">
            <summary>
            Raised when a message which cannot be parsed is received
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.BuilderFactory">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory" /> instance used to construct builders with some
            of the properties pre-loaded from the configuration
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.ClientApi">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.API.IMtsClientApi"/> instance used to send requests to MTS REST API
            </summary>
            <value>The client api</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.CustomBetManager">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.API.ICustomBetManager" /> instance used to perform various custom bet operations
            </summary>
            <value>The custom bet manager</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.ReportManager">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.API.IReportManager" /> instance used to get various reports
            </summary>
            <value>The report manager</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.API.MtsSdk.ConnectionStatus">
            <summary>
            Gets the connection status.
            </summary>
            <value>The connection status.</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Constructs a new instance of the <see cref="T:Sportradar.MTS.SDK.API.MtsSdk"/> class
            </summary>
            <param name="config">A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> instance representing feed configuration</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.GetConfiguration">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" /> instance with information read from application configuration file
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" /> instance read from application configuration file</returns>
            <exception cref="T:System.InvalidOperationException">The configuration could not be loaded, or the requested section does not exist in the config file</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The section read from the configuration file is not valid</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.CreateConfiguration(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" /> instance from provided information
            </summary>
            <param name="username">The username used when establishing connection to the AMQP broker</param>
            <param name="password">The password used when establishing connection to the AMQP broker</param>
            <param name="host">A value specifying the host name of the AMQP broker</param>
            <param name="vhost">A value specifying the virtual host name of the AMQP broker</param>
            <param name="useSsl">A value specifying whether the connection to AMQP broker should use SSL encryption</param>
            <param name="accessToken">Gets the access token for the UF feed (only necessary if UF selections will be build)</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" /> instance created from provided information</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.CreateConfigurationBuilder">
            <summary>
            Creates the <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/> for building the <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/>
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.API.ISdkConfigurationBuilder"/> to be used to create <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.Close">
            <summary>
            Closes the current <see cref="T:Sportradar.MTS.SDK.API.IMtsSdk"/> instance and disposes resources used by it
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.Dispose">
            <summary>
            Disposes the current instance and resources associated with it
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.Dispose(System.Boolean)">
            <summary>
            Disposes the current instance and resources associated with it
            </summary>
            <param name="disposing">Value indicating whether the managed resources should also be disposed</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.Open">
            <summary>
            Opens the current feed
            </summary>
            <exception cref="T:System.ObjectDisposedException">The feed is already disposed</exception>
            <exception cref="T:System.InvalidOperationException">The feed is already opened</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"> Connection to the message broker failed, Probable Reason={Invalid or expired token}</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.SendTicket(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Sends the ticket to the MTS server. The response will raise TicketResponseReceived event
            </summary>
            <param name="ticket">The <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> to be send</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.SendTicketBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicket)">
            <summary>
            Sends the ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">The <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.SendTicketCancelBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel)">
            <summary>
            Sends the cancel ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">The <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.SendTicketCashoutBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout)">
            <summary>
            Sends the cashout ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" /> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.API.MtsSdk.SendTicketNonSrSettleBlocking(Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle)">
            <summary>
            Sends the cashout ticket to the MTS server and wait for the response message on the feed
            </summary>
            <param name="ticket">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle" /> to be send</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException">
            <summary>
            An exception thrown by the SDK cache components when the requested key was not found in the cache
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.Key">
            <summary>
            Gets the key requested key
            </summary>
            <value>The key</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="key">The key requested key</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">
            <summary>
            An exception thrown by the SDK when an error occurred while communicating with external source (Feed REST-ful API)
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.Url">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the url specifying the resource which was being accessed
            </summary>
            <value>The URL</value>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.ResponseCode">
            <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode"/> specifying the response's status code
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="url">The <see cref="T:System.String"/> representation of the url specifying the resource which was being accessed </param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.#ctor(System.String,System.String,System.Net.HttpStatusCode,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="url">The <see cref="T:System.String"/> representation of the url specifying the resource which was being accessed </param>
            <param name="responseCode">A <see cref="T:System.Net.HttpStatusCode"/> specifying the response code</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">
            <summary>
            An exception thrown by the SDK when a deserialization of the xml received from the feed fails
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.Xml">
            <summary>
            Gets the data which could not be deserialized
            </summary>
            <value>The XML</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.RootElementName">
            <summary>
            Gets the name of the root xml element associated with the exception or a null reference if element name could not be determined
            </summary>
            <value>The name of the root element</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="xml">The data which could not be deserialized</param>
            <param name="rootElementName">The name of the root xml element associated with the exception or a null reference if element name could not be determined</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException.ToString">
            <summary>
            Returns a string that represents this instance
            </summary>
            <returns>A string that represents this instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException">
            <summary>
            A base class for all exceptions thrown by the feed SDK
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">
            <summary>
            An exception thrown by the SDK when the entity received from the feed could not be mapped to entity used by the SDK
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.MappingException.PropertyName">
            <summary>
            Gets the name of the property which caused the exception
            </summary>
            <value>The name of the property</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.MappingException.PropertyValue">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the property value which caused the exception.
            </summary>
            <value>The property value</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Exceptions.MappingException.TargetTypeName">
            <summary>
            Gets the <see cref="P:Sportradar.MTS.SDK.Common.Exceptions.MappingException.TargetTypeName"/> of the target entity
            </summary>
            <value>The name of the target type</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MappingException.#ctor(System.String,System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="propertyName">The name of the property which caused the exception</param>
            <param name="propertyValue">The <see cref="T:System.String"/> representation of the property value which caused the exception</param>
            <param name="targetTypeName">The <see cref="P:Sportradar.MTS.SDK.Common.Exceptions.MappingException.TargetTypeName"/> of the target entity</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MappingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MappingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MappingException.ToString">
            <summary>
            Returns a string that represents this instance
            </summary>
            <returns>A string that represents this instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.MtsApiException">
            <summary>
            An exception thrown by the SDK when there is a problem with communication with MTS API
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MtsApiException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsApiException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MtsApiException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsApiException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException">
            <summary>
            An exception thrown by the SDK when there is a problem with communication via <see cref="T:Sportradar.MTS.SDK.API.IReportManager"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MtsReportException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.RabbitMqException">
            <summary>
            An exception thrown by the SDK when there is a problem with communication with rabbit mq
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.RabbitMqException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.RabbitMqException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.RabbitMqException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.RabbitMqException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Exceptions.ResponseTimeoutException">
            <summary>
            An exception thrown by the SDK when the timeout for receiving response expired
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Exceptions.FeedSdkException" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.ResponseTimeoutException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.ResponseTimeoutException"/> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Exceptions.ResponseTimeoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.ResponseTimeoutException"/> class
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.IAcknowledgeable">
            <summary>
            Defines a contract for classes used to provide acknowledgment
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.IAcknowledgeable.Acknowledge(System.Boolean)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.IAcknowledgeable.Acknowledge(System.Boolean,System.Int32,System.Int32,System.String)">
            <summary>
            Send acknowledgment back to MTS
            </summary>
            <param name="markAccepted">if set to <c>true</c> [mark accepted]</param>
            <param name="bookmakerId">The sender identifier (bookmakerId)</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.EnumHelper">
            <summary>
            Defines static methods used for manipulate with enums
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.IsEnumMember``1(System.Object)">
            <summary>
            Determines whether the provided value is member of the specified enumeration
            </summary>
            <typeparam name="TEnum">The enumeration whose members are to be checked</typeparam>
            <param name="value">The value to check</param>
            <returns>True if the provided value is member of the specified enumeration. Otherwise false</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.GetEnumValue``1(System.Int32)">
            <summary>
            Converts the provided <code>value</code> to the member of the specified enum
            </summary>
            <typeparam name="T">The type of enum to which to convert the <code>value</code></typeparam>
            <param name="value">The value to be converted</param>
            <returns>The member of the specified enum</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.GetEnumValue``1(System.Boolean,System.Int32,``0)">
            <summary>
            Converts the provided <code>value</code> to the member of the specified enum, or returns <code>defaultValue</code>
            if value of <code>specified</code> is false
            </summary>
            <typeparam name="T">The type of enum to which to convert the <code>value</code></typeparam>
            <param name="specified">Value indicating whether the value field was specified in the feed message</param>
            <param name="value">The value in the feed message</param>
            <param name="defaultValue">A member of enum T to be returned if <code>specified</code> is false</param>
            <returns>The <code>value</code> converted to enum member T</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.GetEnumValue``1(System.Int32,``0)">
            <summary>
            Converts the provided <code>value</code> to the member of the specified enum, or returns <code>defaultValue</code>
            </summary>
            <typeparam name="T">The type of enum to which to convert the <code>value</code></typeparam>
            <param name="value">The value in the feed message</param>
            <param name="defaultValue">A T member to be returned if unknown <code>value</code></param>
            <returns>The <code>value</code> converted to T enum member</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.GetEnumValue``1(System.String)">
            <summary>
            Converts the provided <code>value</code> (enum value name) to the member of the specified enum
            </summary>
            <typeparam name="T">The type of enum to which to convert the <code>value</code></typeparam>
            <param name="value">The value name to be converted</param>
            <returns>The member of the specified enum</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.EnumHelper.GetEnumValue``1(System.String,``0)">
            <summary>
            Converts the provided <code>value</code> (enum value name) to the member of the specified enum
            </summary>
            <typeparam name="T">The type of enum to which to convert the <code>value</code></typeparam>
            <param name="value">The value name to be converted</param>
            <param name="defaultValue">A member of enum T to be returned if <code>value</code> is not member of enum</param>
            <returns>The member of the specified enum</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.ExtensionMethods">
            <summary>
            Defines extension methods used by the SDK
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ExtensionMethods.GetData(System.IO.Stream)">
            <summary>
            Gets a <see cref="T:System.String"/> representation of the provided <see cref="T:System.IO.Stream"/>
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> whose content to get</param>
            <returns>A <see cref="T:System.String"/> representation of the <see cref="T:System.IO.Stream"/> content</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1">
            <summary>
            Defines a contract implemented by classes used to deserialize feed messages to
            <typeparam name="T">Defines the base that can be deserialized using the <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1"/></typeparam>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte"/> array to instance of T
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> instance containing data to be deserialized </param>
            <returns>The <code>data</code> deserialized to instance of T</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte"/> array to instance of T
            </summary>
            <typeparam name="T1">Specifies the type to which to deserialize the data</typeparam>
            <param name="stream">A <see cref="T:System.IO.Stream"/> instance containing data to be deserialized </param>
            <returns>The <code>data</code> deserialized to instance of T1</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1.Deserialize``1(System.String)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte"/> array to instance of T
            </summary>
            <typeparam name="T1">Specifies the type to which to deserialize the data</typeparam>
            <param name="input">A (JSON) string text containing data to be deserialized</param>
            <returns>The <code>data</code> deserialized to instance of T1</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.ISequenceGenerator"/> which generates incremental sequence numbers
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator._minValue">
            <summary>
            The minimum allowed value for generated sequence numbers
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator._maxValue">
            <summary>
            The maximum allowed value for generated sequence numbers
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator._value">
            <summary>
            Current sequence number
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator"/> which generates positive sequence numbers
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator.#ctor(System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator"/> which generates sequence numbers between specified min and max value
            </summary>
            <param name="minValue">The minimum allowed value for generated sequence numbers</param>
            <param name="maxValue">The maximum allowed value for generated sequence numbers</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.IncrementalSequenceGenerator.GetNext">
            <summary>
            Gets the next available sequence number
            </summary>
            <returns>the next available sequence number</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.ISequenceGenerator">
            <summary>
            Defines a contract implemented by classes used to generate sequence numbers
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ISequenceGenerator.GetNext">
            <summary>
            Gets the next available sequence number
            </summary>
            <returns>the next available sequence number</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.ITimer">
            <summary>
            Defines a contract implemented by classes used to execute period tasks
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed">
            <summary>
            Raised when the timer elapses
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Start">
            <summary>
            Starts (or restarts, if already running) the current instance so it will start raising the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event.
            The dueTime and period are specified by values passed to the constructor or by those passed
            to the last call of <see cref="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Start(System.TimeSpan,System.TimeSpan)"/> method
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Start(System.TimeSpan,System.TimeSpan)">
            <summary>
            Starts (or restarts, if already running) the current instance so it will start raising the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event.
            Note that the <code>dueTime</code> and <code>period</code> arguments will override those passed to the
            constructor and any subsequent calls to <see cref="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Start"/> will use the new values
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> specifying a time period before the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event will be raised for the first time</param>
            <param name="period">A <see cref="T:System.TimeSpan"/> specifying a period between subsequent raises of the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ITimer.FireOnce(System.TimeSpan)">
            <summary>
            Starts (or restarts, if already running) the current instance so the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event will be raised once.
            Note the <paramref name="dueTime"/> will not override values used by the <see cref="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Start"/> method
            </summary>
            <param name="dueTime">The due time</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.ITimer.Stop">
            <summary>
            Stops the current instance (if running) so it will no longer raise the <see cref="E:Sportradar.MTS.SDK.Common.Internal.ITimer.Elapsed"/> event. If the
            current instance was already stopped the call has no effect.
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute">
            <summary>
            A method or class attribute indicating if the method input and output parameters should be logged
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute.LoggerType">
            <summary>
            The <see cref="F:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute.LoggerType"/> of the attribute
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute.#ctor(Sportradar.MTS.SDK.Common.Log.LoggerType)">
            <summary>
            Initializes new Log attribute with specified <see cref="F:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute.LoggerType"/>
            </summary>
            <param name="loggerType">A <see cref="F:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute.LoggerType"/> used to create new log attribute</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1">
            <summary>
            A log proxy used to log input and output parameters of a method
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1.#ctor(`0,Sportradar.MTS.SDK.Common.Log.LoggerType,System.Boolean)">
            <summary>
            Initializes new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1"/>
            </summary>
            <param name="decorated">A base class to be decorated</param>
            <param name="loggerType">A <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/> to be used within the proxy</param>
            <param name="canOverrideLoggerType">A value indicating if the <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/> can be overridden with <see cref="T:Sportradar.MTS.SDK.Common.Internal.Log.LogAttribute"/> on a method or class</param>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1.Filter">
            <summary>
            A Predicate used to filter which class methods may be logged
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1.Invoke(System.Runtime.Remoting.Messaging.IMessage)">
            <summary>When overridden in a derived class, invokes the method that is specified in the provided <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> on the remote object that is represented by the current instance</summary>
            <returns>The message returned by the invoked method, containing the return value and any out or ref parameters</returns>
            <param name="msg">A <see cref="T:System.Runtime.Remoting.Messaging.IMessage" /> that contains a <see cref="T:System.Collections.IDictionary" /> of information about the method call</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Log.LogProxyFactory">
            <summary>
            Factory for the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Log.LogProxy`1"/>
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger">
            <summary>
            A logger used to log different events in sdk
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Logger">
            <summary>Get the implementation behind this wrapper object</summary>
            <value>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this object.
            </value>
            <remarks>
            <para>
            The <see cref="T:log4net.Core.ILogger" /> object that in implementing this
            object. The <c>Logger</c> object may not
            be the same object as this object because of logger decorators.
            This gets the actual underlying objects that is used to process
            the log events.
            </para>
            </remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Name">
            <summary>
            Gets the name of the logger
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.IsDebugEnabled">
            <summary>
            Checks if the logger is enabled for Debug level
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.IsInfoEnabled">
            <summary>
            Checks if the logger is enabled for Info level
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.IsWarnEnabled">
            <summary>
            Checks if the logger is enabled for Warn level
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.IsErrorEnabled">
            <summary>
            Checks if the logger is enabled for Error level
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.IsFatalEnabled">
            <summary>
            Checks if the logger is enabled for Fatal level
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.#ctor(Sportradar.MTS.SDK.Common.Log.LoggerType,System.Type,System.String)">
            <summary>
            Creates new SdkLogger for specific <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/>
            </summary>
            <param name="loggerType">A <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/> to be used when creating new SdkLogger</param>
            <param name="classType">A type to be used when creating new SdkLogger</param>
            <param name="repositoryName">Repository containing the logger</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Info(System.String)">
            <summary>
            Logs a message with Info level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Debug(System.String)">
            <summary>
            Logs a message with Debug level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Warn(System.String)">
            <summary>
            Logs a message with Warn level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Error(System.String)">
            <summary>
            Logs a message with Error level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Fatal(System.String)">
            <summary>
            Logs a message with Fatal level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Info(System.Object)">
            <summary>
            Logs a message with Info level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Info(System.Object,System.Exception)">
            <summary>
            Logs a message object with the <c>INFO</c> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks>See the <see cref="M:Info(object)" /> form for more detailed information</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.InfoFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level</overloads>
            <seealso cref="M:Info(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.InfoFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.InfoFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.InfoFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <seealso cref="M:Info(object)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.InfoFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Info" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <seealso cref="M:Info(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsInfoEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Info(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Debug(System.Object)">
            <summary>
            Logs a message with Debug level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Debug(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Debug" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks>See the <see cref="M:Debug(object)" /> form for more detailed information</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.DebugFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <overloads>Log a formatted string with the <see cref="F:log4net.Core.Level.Debug" /> level</overloads>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.DebugFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.DebugFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.DebugFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.DebugFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Debug" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <seealso cref="M:Debug(object)" />
            <seealso cref="P:log4net.ILog.IsDebugEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Debug(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Warn(System.Object)">
            <summary>
            Logs a message with Warn level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Warn(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Warn" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks>See the <see cref="M:Warn(object)" /> form for more detailed information</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.WarnFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level</overloads>
            <seealso cref="M:Warn(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.WarnFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.WarnFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.WarnFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <seealso cref="M:Warn(object)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.WarnFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Warn" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <seealso cref="M:Warn(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsWarnEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Warn(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Error(System.Object)">
            <summary>
            Logs a message with Error level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Fatal(System.Object)">
            <summary>
            Logs a message with Fatal level
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Fatal(System.Object,System.Exception)">
            <summary>
            Log a message object with the <see cref="F:log4net.Core.Level.Fatal" /> level including
            the stack trace of the <see cref="T:System.Exception" /> passed
            as a parameter.
            </summary>
            <param name="message">The message object to log</param>
            <param name="exception">The exception to log, including its stack trace</param>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
            <remarks>See the <see cref="M:Fatal(object)" /> form for more detailed information</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.FatalFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <remarks>
            <para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para>
            </remarks>
            <seealso cref="M:Fatal(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.FatalFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level</overloads>
            <seealso cref="M:Fatal(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.FatalFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.FatalFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.FatalFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Fatal" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <seealso cref="M:Fatal(object)" />
            <seealso cref="P:log4net.ILog.IsFatalEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Fatal(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.Error(System.Object,System.Exception)">
            <summary>
            Logs a message with Error level
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.ErrorFormat(System.IFormatProvider,System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="provider">An <see cref="T:System.IFormatProvider" /> that supplies culture-specific formatting information</param>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <seealso cref="M:Error(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.ErrorFormat(System.String,System.Object[])">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="args">An Object array containing zero or more objects to format</param>
            <overloads>Log a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level</overloads>
            <seealso cref="M:Error(object,Exception)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.ErrorFormat(System.String,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.ErrorFormat(System.String,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Log.SdkLogger.ErrorFormat(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Logs a formatted message string with the <see cref="F:log4net.Core.Level.Error" /> level.
            </summary>
            <param name="format">A String containing zero or more format items</param>
            <param name="arg0">An Object to format</param>
            <param name="arg1">An Object to format</param>
            <param name="arg2">An Object to format</param>
            <seealso cref="M:Error(object)" />
            <seealso cref="P:log4net.ILog.IsErrorEnabled" />
            <remarks><para>
            The message is formatted using the <c>String.Format</c> method. See
            <see cref="M:String.Format(string, object[])" /> for details of the syntax of the format string and the behavior
            of the formatting.
            </para>
            <para>
            This method does not take an <see cref="T:System.Exception" /> object to include in the
            log event. To pass an <see cref="T:System.Exception" /> use one of the <see cref="M:Error(object,Exception)" />
            methods instead.
            </para></remarks>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Metrics.IHealthStatusProvider">
            <summary>
            Defines a contract implemented by classes used to provide <see cref="T:Metrics.HealthCheckResult"/> for the SDK
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Metrics.IHealthStatusProvider.RegisterHealthCheck">
            <summary>
            Registers the health check which will be periodically triggered
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Metrics.IHealthStatusProvider.StartHealthCheck">
            <summary>
            Starts the health check and returns <see cref="T:Metrics.HealthCheckResult"/>
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter">
            <summary>
            Implementation of <see cref="T:Metrics.Reporters.MetricsReport" /> using <see cref="T:log4net.ILog" /> for printing collected data
            </summary>
            <seealso cref="T:Metrics.Reporters.MetricsReport" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter.#ctor(Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter"/> class
            </summary>
            <param name="printMode">The print mode</param>
            <param name="decimals">The number decimals used for printing numbers</param>
            <param name="runHealthStatus">Indicates if it should execute <see cref="M:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter.RunHealthStatus(System.String)"/> before completing <see cref="M:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter.RunReport(Metrics.MetricData.MetricsData,System.Func{Metrics.HealthStatus},System.Threading.CancellationToken)"/></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter.RunReport(Metrics.MetricData.MetricsData,System.Func{Metrics.HealthStatus},System.Threading.CancellationToken)">
            <summary>
            Runs the report of <see cref="T:Metrics.MetricData.MetricsData"/>
            </summary>
            <param name="metricsData">The metrics data</param>
            <param name="healthStatus">The health status</param>
            <param name="token">The token</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Metrics.MetricsReporter.RunHealthStatus(System.String)">
            <summary>
            Gets the health status and log it
            </summary>
            <param name="context">The context</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode">
            <summary>
            Enum MetricsReportPrintMode used to define mode of printing of information into log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode.Normal">
            <summary>
            The normal
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode.Minimal">
            <summary>
            The minimal
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode.Compact">
            <summary>
            The compact
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Metrics.Reports.MetricsReportPrintMode.Full">
            <summary>
            The full
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher" /> which uses the HTTP requests to fetch the requested data
            </summary>
            <seealso cref="T:System.MarshalByRefObject" />
            <seealso cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher" />
            <seealso cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher._client">
            <summary>
            A <see cref="T:System.Net.Http.HttpClient"/> used to invoke HTTP requests
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.#ctor(System.Net.Http.HttpClient,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher"/> class
            </summary>
            <param name="client">A <see cref="T:System.Net.Http.HttpClient"/> used to invoke HTTP requests</param>
            <param name="accessToken">A token used when making the http requests</param>
            <param name="connectionFailureLimit">Indicates the limit of consecutive request failures, after which it goes in "blocking mode"</param>
            <param name="connectionFailureTimeout">indicates the timeout after which comes out of "blocking mode" (in seconds)</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.GetDataAsync(System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream" /> containing data fetched from the provided <see cref="T:System.Uri" />
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of the resource to be fetched</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which, when completed will return a <see cref="T:System.IO.Stream" /> containing fetched data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.GetDataAsync(System.String,System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream" /> containing data fetched from the provided <see cref="T:System.Uri" />
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="uri">The <see cref="T:System.Uri" /> of the resource to be fetched</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which, when completed will return a <see cref="T:System.IO.Stream" /> containing fetched data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.PostDataAsync(System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream" /> containing data fetched from the provided <see cref="T:System.Uri" />
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of the resource to be fetched</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent" /> to be posted to the specific <see cref="T:System.Uri" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which, when successfully completed will return a <see cref="T:System.Net.Http.HttpResponseMessage" /></returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.PostDataAsync(System.String,System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream" /> containing data fetched from the provided <see cref="T:System.Uri" />
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="uri">The <see cref="T:System.Uri" /> of the resource to be fetched</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent" /> to be posted to the specific <see cref="T:System.Uri" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which, when successfully completed will return a <see cref="T:System.Net.Http.HttpResponseMessage" /></returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.RecordSuccess">
            <summary>
            Records that the request made was successful
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.RecordFailure">
            <summary>
            Records that the request ended with HttpRequestException or was taking too long and was canceled
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataFetcher.ValidateConnection(System.Uri)">
            <summary>
            Validates if the request should be made or too many errors happens and should be omitted
            </summary>
            <param name="uri">The URI of the request to be made</param>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute request due to previous failures</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataRestful"/> which uses the HTTP requests to post/get/put/patch and delete the data
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful._client">
            <summary>
            A <see cref="T:System.Net.Http.HttpClient"/> used to invoke HTTP requests
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful.#ctor(System.Net.Http.HttpClient,System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful"/> class
            </summary>
            <param name="client">A <see cref="T:System.Net.Http.HttpClient" /> used to invoke HTTP requests</param>
            <param name="accessToken">A token used when making the http requests</param>
            <param name="connectionFailureLimit">Indicates the limit of consecutive request failures, after which it goes in "blocking mode"</param>
            <param name="connectionFailureTimeout">indicates the timeout after which comes out of "blocking mode" (in seconds)</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful.PutDataAsync(System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of PUT request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.HttpDataRestful.DeleteDataAsync(System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of DELETE request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher">
            <summary>
            Defines a contract implemented by classes used to obtain <see cref="T:System.IO.Stream"/> instances containing some data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher.GetDataAsync(System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream"/> containing data fetched from the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be fetched</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.IO.Stream"/> containing fetched data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher.GetDataAsync(System.String,System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream"/> containing data fetched from the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be fetched</param>
            <param name="authorization">The value of authorization header</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.IO.Stream"/> containing fetched data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster">
            <summary>
            Defines a contract implemented by classes used POST request to obtain <see cref="T:System.Net.Http.HttpResponseMessage"/> instance containing status code and data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster.PostDataAsync(System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of POST request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster.PostDataAsync(System.String,System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of POST request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <param name="authorization">The value of authorization header</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataRestful">
            <summary>
            Defines a contract implemented by classes used REST request to obtain <see cref="T:System.Net.Http.HttpResponseMessage"/> instance containing status code and data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataRestful.PutDataAsync(System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of PUT request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.IDataRestful.DeleteDataAsync(System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.Net.Http.HttpResponseMessage"/> as a result of DELETE request send to the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be send to</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/> containing status code and data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.Rest.LogHttpDataFetcher">
            <summary>
            A implementation of <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher"/> and <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster"/> which uses the HTTP requests to fetch or post the requested data. All request are logged.
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher" />
            <remarks>ALL, DEBUG, INFO, WARN, ERROR, FATAL, OFF - the levels are defined in order of increasing priority</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.LogHttpDataFetcher.#ctor(System.Net.Http.HttpClient,System.String,Sportradar.MTS.SDK.Common.Internal.ISequenceGenerator,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.LogHttpDataFetcher"/> class
            </summary>
            <param name="client">A <see cref="T:System.Net.Http.HttpClient"/> used to invoke HTTP requests</param>
            <param name="accessToken">A token used when making the http requests</param>
            <param name="sequenceGenerator">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.ISequenceGenerator"/> used to identify requests</param>
            <param name="connectionFailureLimit">Indicates the limit of consecutive request failures, after which it goes in "blocking mode"</param>
            <param name="connectionFailureTimeout">indicates the timeout after which comes out of "blocking mode" (in seconds)</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.LogHttpDataFetcher.GetDataAsync(System.String,System.Uri)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream" /> containing data fetched from the provided <see cref="T:System.Uri" />
            </summary>
            <param name="uri">The <see cref="T:System.Uri" /> of the resource to be fetched</param>
            <param name="authorization">The value of authorization header</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> which, when completed will return a <see cref="T:System.IO.Stream" /> containing fetched data</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.Rest.LogHttpDataFetcher.PostDataAsync(System.String,System.Uri,System.Net.Http.HttpContent)">
            <summary>
            Asynchronously gets a <see cref="T:System.IO.Stream"/> containing data fetched from the provided <see cref="T:System.Uri"/>
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> of the resource to be fetched</param>
            <param name="authorization">The value of authorization header</param>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which, when successfully completed will return a <see cref="T:System.Net.Http.HttpResponseMessage"/></returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http post</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.SafeInvoker">
            <summary>
            Defines extension methods for Func classes which catch pre-defined exception types
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.HandleException(System.Exception,log4net.ILog,System.String)">
            <summary>
            Handles the provided exception by logging it's data along with the provided message
            </summary>
            <param name="ex">The <see cref="T:System.Exception"/> to be handled</param>
            <param name="log">The log4net.ILog instance where the log should be written</param>
            <param name="errorMessage">The error message to be written along with exception data</param>
            <returns><c>true</c> True if the exception was of the following types: <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException"/>, <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException"/> or <see cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.SafeInvokeAsync(System.Func{System.Threading.Tasks.Task},log4net.ILog,System.String)">
            <summary>
            Safely invokes the provided asynchronous function
            </summary>
            <param name="method">A <see cref="T:System.Func`1"/> representing the method</param>
            <param name="log">The log4net.ILog where potential exceptions should be logged</param>
            <param name="errorMessage">The error message to be written along with the exception</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.SafeInvokeAsync``1(System.Func{System.Threading.Tasks.Task{``0}},log4net.ILog,System.String)">
            <summary>
            Safely invokes the provided asynchronous function
            </summary>
            <param name="method">A <see cref="T:System.Func`1"/> representing the method</param>
            <param name="log">The log4net.ILog where potential exceptions should be logged</param>
            <param name="errorMessage">The error message to be written along with the exception</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.SafeInvokeAsync``2(System.Func{``0,System.Threading.Tasks.Task{``1}},``0,log4net.ILog,System.String)">
            <summary>
            Safely invokes the provided asynchronous function
            </summary>
            <param name="method">A <see cref="T:System.Func`1"/> representing the method</param>
            <param name="arg">The function argument</param>
            <param name="log">The log4net.ILog where potential exceptions should be logged</param>
            <param name="errorMessage">The error message to be written along with the exception</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.SafeInvokeAsync``3(System.Func{``0,``1,System.Threading.Tasks.Task{``2}},``0,``1,log4net.ILog,System.String)">
            <summary>
            Safely invokes the provided asynchronous function
            </summary>
            <param name="method">A <see cref="T:System.Func`1"/> representing the method</param>
            <param name="arg1">The function's first argument</param>
            <param name="arg2">The function's second argument</param>
            <param name="log">The log4net.ILog where potential exceptions should be logged</param>
            <param name="errorMessage">The error message to be written along with the exception</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SafeInvoker.SafeInvokeAsync``4(System.Func{``0,``1,``2,System.Threading.Tasks.Task{``3}},``0,``1,``2,log4net.ILog,System.String)">
            <summary>
            Safely invokes the provided asynchronous function
            </summary>
            <param name="method">A <see cref="T:System.Func`1"/> representing the method</param>
            <param name="arg1">The function's first argument</param>
            <param name="arg2">The function's second argument</param>
            <param name="arg3">The function's second argument</param>
            <param name="log">The log4net.ILog where potential exceptions should be logged</param>
            <param name="errorMessage">The error message to be written along with the exception</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.SdkInfo">
            <summary>
            Class provides information about current executing assembly
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkInfo.GetVersion">
            <summary>
            Gets the version number of the executing assembly
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkInfo.GetVersion(System.Reflection.Assembly)">
            <summary>
            Gets the assembly version number
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkInfo.Multiply(System.Int32,System.Double,System.Int32)">
            <summary>
            Multiplies the specified value
            </summary>
            <param name="value">The initial value</param>
            <param name="factor">The factor</param>
            <param name="maxValue">The maximum value</param>
            <returns>The multiplied value, up to max value</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkInfo.Increase(System.Int32,System.Int32,System.Int32)">
            <summary>
            Increase the specified value
            </summary>
            <param name="value">The initial value</param>
            <param name="factor">The factor (if 0 is *2)</param>
            <param name="maxValue">The maximum value</param>
            <returns>The increased value, up to max value</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Internal.SdkTimer">
            <summary>
            A timer used for invocation of period tasks
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.SdkTimer._timer">
            <summary>
            Internally used <see cref="T:System.Threading.Timer"/> instance
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.SdkTimer._dueTime">
            <summary>
            Value specifying the time between the start of the timer and the first firing of the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.SdkTimer._period">
            <summary>
            Value specifying the time window between the first and subsequent firing of the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event
            </summary>
        </member>
        <member name="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed">
            <summary>
            Raised when the timer elapses
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Internal.SdkTimer._isDisposed">
            <summary>
            Value indicating whether the current instance was/is already disposed
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Common.Internal.SdkTimer"/> class
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> specifying a time period before the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event will be raised for the first time</param>
            <param name="period">A <see cref="T:System.TimeSpan"/> specifying a period between subsequent raises of the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Finalize">
            <summary>
            Disposes un-managed resources associated with the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.OnTick(System.Object)">
            <summary>
            Invoked when the internally used <see cref="T:System.Threading.Timer"/> elapses
            </summary>
            <param name="state">A <see cref="T:System.Object"/> instance passed to the timer when it was constructed</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Dispose(System.Boolean)">
            <summary>
            Disposes resources associated with the current instance
            </summary>
            <param name="disposing">Value indicating whether the managed resources should also be disposed</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Start">
            <summary>
            Starts (or restarts if already running) the current instance so it will start raising the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event.
            The dueTime and period are specified by values passed to the constructor or by those passed
            to the last call of <see cref="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Start(System.TimeSpan,System.TimeSpan)"/> method
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Start(System.TimeSpan,System.TimeSpan)">
            <summary>
            Starts (or restarts if already running) the current instance so it will start raising the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event.
            Note that the <code>dueTime</code> and <code>period</code> arguments will override those passed to the
            constructor and any subsequent calls to <see cref="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Start"/> will use new values
            </summary>
            <param name="dueTime">A <see cref="T:System.TimeSpan"/> specifying a time period before the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event will be raised for the first time</param>
            <param name="period">A <see cref="T:System.TimeSpan"/> specifying a period between subsequent raises of the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.FireOnce(System.TimeSpan)">
            <summary>
            Starts (or restarts if already running) the current instance so the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event will be raised once.
            Note the <paramref name="dueTime"/> will not override values used by the <see cref="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Start"/> method
            </summary>
            <param name="dueTime">The due time</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Stop">
            <summary>
            Stops the current instance (if running) so it will no longer raise the <see cref="E:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Elapsed"/> event. If the
            current instance was already stopped the call has no effect.
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Internal.SdkTimer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.IOpenable">
            <summary>
            Defines a contract implemented by classes which can be opened and closed
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Common.IOpenable.IsOpened">
            <summary>
            Gets a value indicating whether the current instance is opened
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.IOpenable.Open">
            <summary>
            Opens the current instance.
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.IOpenable.Close">
            <summary>
            Closes the current instance
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Log.LoggerType">
            <summary>
            Enumeration of all possible types of logger used in SDK. Each can have unique settings in log4net.config file.
            </summary>
            <remarks>Default is basic execution log</remarks>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.Execution">
            <summary>
            The execution log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.FeedTraffic">
            <summary>
            Log for the feed traffic
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.RestTraffic">
            <summary>
            Log for the rest traffic
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.ClientInteraction">
            <summary>
            The client interaction log
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.Cache">
            <summary>
            Log for the cache
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.LoggerType.Stats">
            <summary>
            Log for the SDK statistics
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory">
            <summary>
            Provides methods to get logger for specific <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.SdkLogRepositoryName">
            <summary>
            Default repository name for the SDK
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForFeedTraffic(System.Type,System.String)">
            <summary>
            Method for getting log4net.ILog for feed traffic
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default log4net.ILog with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForRestTraffic(System.Type,System.String)">
            <summary>
            Method for getting log4net.ILog for rest traffic
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default <see cref="T:log4net.ILog"/> with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForClientInteraction(System.Type,System.String)">
            <summary>
            Method for getting log4net.ILog for client interaction
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default log4net.ILog with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForCache(System.Type,System.String)">
            <summary>
            Method for getting log4net.ILog for cache
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default <see cref="T:log4net.ILog"/> with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForStats(System.Type,System.String)">
            <summary>
            Method for getting log4net.ILog for statistics
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default log4net.ILog with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLoggerForExecution(System.Type,System.String)">
            <summary>
            Method for getting default execution log4net.ILog
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <returns>Returns default log4net.ILog with specified settings</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLogger(System.Type,System.String,Sportradar.MTS.SDK.Common.Log.LoggerType)">
            <summary>
            Method for getting correct log4net.ILog for specific logger type
            </summary>
            <param name="type">A type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <param name="loggerType">A value of <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/> to be used to get log4net.ILog</param>
            <returns>Returns log4net.ILog with specific settings for this <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.GetLogger(System.String,System.String,Sportradar.MTS.SDK.Common.Log.LoggerType)">
            <summary>
            Method for getting correct log4net.ILog for specific logger type
            </summary>
            <param name="typeName">The name of the type to be used for creating new ILog</param>
            <param name="repositoryName">Repository containing the logger</param>
            <param name="loggerType">A value of <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/> to be used to get log4net.ILog</param>
            <returns>Returns log4net.ILog with specific settings for this <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.Configure(System.IO.FileInfo,System.String)">
            <summary>
            Configures the LogManager for SDK
            </summary>
            <param name="configFile">The configuration file</param>
            <param name="repositoryName">Repository name to be created containing the SDK loggers</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Common.Log.SdkLoggerFactory.CheckAllLoggersExists(System.String)">
            <summary>
            Method checks if all loggers are created for each <see cref="T:Sportradar.MTS.SDK.Common.Log.LoggerType"/>
            </summary>
            <param name="repositoryName">Repository containing the loggers</param>
            <returns>Returns value indicating if all sdk defined loggers exists</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder._ip">
            <summary>
            The ip
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder._langId">
            <summary>
            The language identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder._deviceId">
            <summary>
            The device identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder._clientId">
            <summary>
            The client identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder._confidence">
            <summary>
            The confidence
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.Create">
            <summary>
            Creates new <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/>
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.SetIp(System.Net.IPAddress)">
            <summary>
            Sets the end user's ip
            </summary>
            <param name="ip">The ip address to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.SetLanguageId(System.String)">
            <summary>
            Sets the 2-letter ISO 639-1 language code
            </summary>
            <param name="languageId">The language</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.SetDeviceId(System.String)">
            <summary>
            Sets the device end user's device id
            </summary>
            <param name="deviceId">The device identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.SetId(System.String)">
            <summary>
            Sets the end user's unique id (in client's system)
            </summary>
            <param name="clientId">The client identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.SetConfidence(System.Int64)">
            <summary>
            Sets the suggested CCF of the customer multiplied by 10000 and rounded to a long value
            </summary>
            <param name="confidence">The confidence to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.EndCustomerBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer" />
            </summary>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetBetBonus(System.Int64,Sportradar.MTS.SDK.Entities.Enums.BetBonusMode,Sportradar.MTS.SDK.Entities.Enums.BetBonusType,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.BetBonusPaidAs})">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="betBonusMode">The bet bonus mode</param>
            <param name="betBonusType">Type of the bet bonus</param>
            <param name="description">Description of the bet bonus</param>
            <param name="paidAs">PaidAs type of the bet bonus</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetFreeStake(System.Int64,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakeType},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakePaidAs})">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="freeStakeType">Type of the free stake</param>
            <param name="description">Description of the free stake</param>
            <param name="paidAs">PaidAs type of the free stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetStake(System.Int64)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetStake(System.Int64,Sportradar.MTS.SDK.Entities.Enums.StakeType)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="stakeType">Type of the stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetEntireStake(System.Int64)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetEntireStake(System.Int64,Sportradar.MTS.SDK.Entities.Enums.StakeType)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="stakeType">Type of the stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetBetId(System.String)">
            <summary>
            Sets the bet id
            </summary>
            <param name="id">The  bet id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.AddSelectedSystem(System.Int32)">
            <summary>
            Add system to <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.SelectedSystems" />
            </summary>
            <param name="systemId">The system id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.GetSelectedSystems">
            <summary>
            Gets the array of selected systems
            </summary>
            <value>The array of selected systems</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetReofferRefId(System.String)">
            <summary>
            Sets the reoffer reference bet id
            </summary>
            <param name="reofferRefId">The reoffer reference id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetSumOfWins(System.Int64)">
            <summary>
            Sets the sum of all wins for all generated combinations for this bet (in ticket currency, used for validation)
            </summary>
            <param name="sum">The sum to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.AddSelection(Sportradar.MTS.SDK.Entities.Interfaces.ISelection)">
            <summary>
            Adds the selection
            </summary>
            <param name="selection">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection"/> to be added to this bet</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.GetSelections">
            <summary>
            Gets the selections
            </summary>
            <returns>Returns all the selections</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetCustomBet(System.Nullable{System.Boolean})">
            <summary>
            Sets the flag if bet is a custom bet (optional, default false)
            </summary>
            <param name="customBet">The flag if bet is a custom bet (optional, default false)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.SetCalculationOdds(System.Nullable{System.Int32})">
            <summary>
            Sets the odds calculated for custom bet multiplied by 10_000 and rounded to int value
            </summary>
            <param name="calculationOdds">The odds calculated for custom bet multiplied by 10_000 and rounded to int value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory">
            <summary>
            Defines a contract used to construct builder instances used when constructing tickets and it's associated entities
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketCancelBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketReofferCancelBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketCashoutBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketNonSrSettleBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateSenderBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateSelectionBuilder(System.Boolean)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/> class
            </summary>
            <param name="isCustomBet">Indicating if selection is for custom bet or not</param>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketAckBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory.CreateTicketCancelAckBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder"/> class</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder">
            <summary>
            Defines a contract for classes building a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder" />
            Implements the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISdkTicketBuilder" />
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ISdkTicketBuilder" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.SetEventId(System.String)">
            <summary>
            Sets event id to the provided <see cref="T:System.String"/>
            </summary>
            <param name="eventId">A <see cref="T:System.String"/> representing the event id.</param>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to set additional values.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.SetMarketId(System.Int32)">
            <summary>
            Sets market id to the provided value
            </summary>
            <param name="marketId">A value representing the market id.</param>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to set additional values.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.SetSpecifiers(System.String)">
            <summary>
            Sets specifiers to the provided value
            </summary>
            <param name="specifiers">A value representing the specifiers.</param>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to set additional values.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.SetOutcomeId(System.String)">
            <summary>
            Sets outcome id to the provided value
            </summary>
            <param name="outcomeId">A value representing the outcome id.</param>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> instance used to set additional values.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.Build">
            <summary>
            Builds and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection"/> instance
            </summary>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection"/> instance.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder.Build(System.String,System.Int32,System.String,System.String)">
            <summary>
            Builds and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection"/> instance
            </summary>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection"/> instance.</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder">
            <summary>
            Defines a contract for classes building <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.SetIp(System.Net.IPAddress)">
            <summary>
            Sets the end user's ip
            </summary>
            <param name="ip">The ip address to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.SetLanguageId(System.String)">
            <summary>
            Sets the 2-letter ISO 639-1 language code
            </summary>
            <param name="languageId">The language</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.SetDeviceId(System.String)">
            <summary>
            Sets the device end user's device id
            </summary>
            <param name="deviceId">The device identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.SetId(System.String)">
            <summary>
            Sets the end user's unique id (in client's system)
            </summary>
            <param name="clientId">The client identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.SetConfidence(System.Int64)">
            <summary>
            Sets the suggested CCF of the customer multiplied by 10000 and rounded to a long value
            </summary>
            <param name="confidence">The confidence to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer" />
            </summary>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ISdkTicketBuilder">
            <summary>
            Defines a contract for classes implementing any ticket builder
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetEventId(System.Int64)">
            <summary>
            Sets the Betradar event (match or outright) id
            </summary>
            <param name="eventId">The event identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetEventId(System.String)">
            <summary>
            Sets the Betradar event (match or outright) id
            </summary>
            <param name="eventId">The event identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetId(System.String)">
            <summary>
            Sets the selection id
            </summary>
            <param name="id">The identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
            <value>Should be composed according to MTS specification</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetIdLo(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sets the selection id for LiveOdds
            </summary>
            <param name="type">The type</param>
            <param name="subType">The subType</param>
            <param name="sov">The special odds value</param>
            <param name="selectionId">The selection id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
            <value>Should be composed according to MTS specification</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetIdLcoo(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sets the selection id for LCOO
            </summary>
            <param name="type">The type</param>
            <param name="sportId">The sport id</param>
            <param name="sov">The special odds value</param>
            <param name="selectionId">The selection id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
            <value>Should be composed according to MTS specification</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetIdUof(System.Int32,System.String,System.Int32,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the selection id for UOF
            </summary>
            <param name="product">The product to be used</param>
            <param name="sportId">The UF sport id</param>
            <param name="marketId">The UF market id</param>
            <param name="selectionId">The selection id</param>
            <param name="specifiers">The array of specifiers represented as string separated with '|'</param>
            <param name="sportEventStatus">The UF sport event status properties</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
            <value>Should be composed according to MTS specification</value>
            <example>
            SetIdUof(Product.LiveOdds, "sr:sport:1", 101, "10", "total=3.0|playerid=sr:player:10201");
            </example>
            <remarks>Method requires accessToken in configuration and access to https://global.api.betradar.com</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetIdUof(System.Int32,System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the selection id for UOF
            </summary>
            <param name="product">The product to be used</param>
            <param name="sportId">The UF sport id</param>
            <param name="marketId">The UF market id</param>
            <param name="selectionId">The selection id</param>
            <param name="specifiers">The array of specifiers</param>
            <param name="sportEventStatus">The UF sport event status properties</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
            <value>Should be composed according to MTS specification</value>
            <remarks>Method requires accessToken in configuration and access to https://global.api.betradar.com</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetOdds(System.Int32)">
            <summary>
            Sets the odds multiplied by 10000 and rounded to int value
            </summary>
            <param name="odds">The odds value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetBanker(System.Boolean)">
            <summary>
            Sets the banker property
            </summary>
            <param name="isBanker">if set to <c>true</c> [is banker]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.SetBoostedOdds(System.Nullable{System.Int32})">
            <summary>
            Sets the boosted odds multiplied by 10000 and rounded to int value
            </summary>
            <param name="boostedOdds">The boosted odds value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.Set(System.Int64,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" /> properties
            </summary>
            <param name="eventId">The event id</param>
            <param name="id">The selection id</param>
            <param name="odds">The odds value to be set</param>
            <param name="isBanker">if set to <c>true</c> [is banker]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.Set(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" /> properties
            </summary>
            <param name="eventId">The event id</param>
            <param name="id">The selection id</param>
            <param name="odds">The odds value to be set</param>
            <param name="isBanker">if set to <c>true</c> [is banker]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISender" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetCurrency(System.String)">
            <summary>
            Sets the 3 letter currency code
            </summary>
            <param name="currency">The currency</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetTerminalId(System.String)">
            <summary>
            Sets the terminal id
            </summary>
            <param name="terminalId">The terminal id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetSenderChannel(Sportradar.MTS.SDK.Entities.Enums.SenderChannel)">
            <summary>
            Sets the senders communication channel
            </summary>
            <param name="channel">The channel</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetShopId(System.String)">
            <summary>
            Sets the shop id
            </summary>
            <param name="shopId">The shop id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetEndCustomer(Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer)">
            <summary>
            Set the identification of the end user (customer)
            </summary>
            <param name="customer">The end customer to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetEndCustomer(System.Net.IPAddress,System.String,System.String,System.String,System.Int64)">
            <summary>
            Set the identification of the end user (customer)
            </summary>
            <param name="ip">The ip address of the end customer</param>
            <param name="customerId">The customer id</param>
            <param name="languageId">The language id</param>
            <param name="deviceId">The device id</param>
            <param name="confidence">The confidence</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.SetLimitId(System.Int32)">
            <summary>
            Sets the client's limit id (provided by Sportradar to the client)
            </summary>
            <param name="limitId">The limit id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISender" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory">
            <summary>
            Defines a contract used to construct simple builder instances(those not needing configuration) used when constructing tickets and it's associated entities
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory.CreateTicketBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory.CreateTicketReofferBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory.CreateEndCustomerBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory.CreateBetBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory.CreateAltStakeBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/> class</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder.SetAck(System.Boolean,System.Int32,System.String)">
            <summary>
            Sets the acknowledgment parameters
            </summary>
            <param name="markAccepted">If set to <c>true</c> [mark accepted]</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder">
            <summary>
            Defines a contract for classes implementing builder for alternative stake <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="ticketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new alternative stake ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new alternative stake ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder.BuildTicket">
            <summary>
            Builds the new <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.GetBets">
            <summary>
            Gets the bets
            </summary>
            <returns>Returns all the bets</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.AddBet(Sportradar.MTS.SDK.Entities.Interfaces.IBet)">
            <summary>
            Adds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet"/>
            </summary>
            <param name="bet">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet"/> to be added to this ticket</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetReofferId(System.String)">
            <summary>
            Sets the reoffer id
            </summary>
            <param name="reofferId">The reoffer id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetAltStakeRefId(System.String)">
            <summary>
            Sets the alternative stake reference ticket id
            </summary>
            <param name="altStakeRefId">The alt stake reference id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetTestSource(System.Boolean)">
            <summary>
            Sets the test source
            </summary>
            <param name="isTest">if set to <c>true</c> [is test]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetOddsChange(Sportradar.MTS.SDK.Entities.Enums.OddsChangeType)">
            <summary>
            Sets the odds change
            </summary>
            <param name="type">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType"/> to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetSender(Sportradar.MTS.SDK.Entities.Interfaces.ISender)">
            <summary>
            Sets the sender
            </summary>
            <param name="sender">The ticket sender</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetTotalCombinations(System.Int32)">
            <summary>
            Sets the expected total number of generated combinations on this ticket (optional, default null). If present, it is used to validate against actual number of generated combinations.
            </summary>
            <param name="totalCombinations">The expected total number of generated combinations</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.SetLastMatchEndTime(System.DateTime)">
            <summary>
            Sets end time of last (non Sportradar) match on ticket
            </summary>
            <param name="lastMatchEndTime">End time of last (non Sportradar) match on ticket</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder.SetAck(System.Boolean,System.Int32,System.String)">
            <summary>
            Sets the acknowledgment parameters
            </summary>
            <param name="markAccepted">If set to <c>true</c> [mark cancelled]</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder">
            <summary>
            Defines a contract for classes building a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to cancel
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.SetCode(Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason)">
            <summary>
            Sets the cancellation code
            </summary>
            <param name="code">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason"/></param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.SetCancelPercent(System.Int32)">
            <summary>
            Sets the percent of cancellation
            </summary>
            <param name="percent">The percent of cancellation</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.AddBetCancel(System.String,System.Nullable{System.Int32})">
            <summary>
            Add the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/>
            </summary>
            <param name="betId">The bet id</param>
            <param name="percent">The cancel percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a int value)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.BuildTicket(System.String,System.Int32,Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason)">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <param name="code">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason"/></param>
            <returns>ITicketCancel</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder">
            <summary>
            Defines a contract for classes building a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to cashout
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.SetCashoutStake(System.Int64)">
            <summary>
            Sets the cashout stake
            </summary>
            <param name="stake">The cashout stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.SetCashoutPercent(System.Int32)">
            <summary>
            Sets the cashout percent
            </summary>
            <param name="percent">The cashout percent</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.AddBetCashout(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Add the bet cashout
            </summary>
            <param name="betId">The bet id</param>
            <param name="stake">The cashout stake value of the assigned bet (quantity multiplied by 10_000 and rounded to a long value)</param>
            <param name="percent">The cashout percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a long value)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.BuildTicket(System.String,System.Int32,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <param name="stake">The cashout stake</param>
            <param name="percent">The cashout percent</param>
            <returns>ITicketCashout</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder">
            <summary>
            Defines a contract for classes building a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" />
            Implements the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISdkTicketBuilder" />
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ISdkTicketBuilder" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to non-sportradar settle
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder.SetNonSrSettleStake(System.Int64)">
            <summary>
            Sets the non-sportradar settle stake
            </summary>
            <param name="stake">The non-sportradar settle stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder.BuildTicket(System.String,System.Int32,System.Int64)">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <param name="stake">The non-sportradar settle stake</param>
            <returns>ITicketNonSrSettle</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder">
            <summary>
            Defines a contract for classes implementing builder for <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" /> reoffer
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="ticketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder.BuildTicket">
            <summary>
            Builds the new <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder">
            <summary>
            Defines a contract for classes building a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" />
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder.SetTicketId(System.String)">
            <summary>
            Sets the reoffer ticket id to cancel
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/></returns>
            <value>Unique reoffer ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder.BuildTicket(System.String,System.Int32)">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" />
            </summary>
            <param name="ticketId">The reoffer ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns an instance of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.FreeStakeType">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.Type"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeType.Total">
            <summary>
            The total
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeType.Unit">
            <summary>
            Unit
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.Description"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription.FreeBet">
            <summary>
            FreeBet: default value, assumed if missing in the ticket)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription.PartialFreeBet">
            <summary>
            PartialFreeBet
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription.Rollover">
            <summary>
            Rollover
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription.MoneyBack">
            <summary>
            MoneyBack
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription.OddsBooster">
            <summary>
            OddsBooster
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.FreeStakePaidAs">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.PaidAs"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakePaidAs.Cash">
            <summary>
            Cash: default value, assumed if missing in the ticket)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.FreeStakePaidAs.FreeBet">
            <summary>
            FreeBet
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.BetBonusPaidAs">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.PaidAs"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusPaidAs.Cash">
            <summary>
            Cash: default value, assumed if missing in the ticket)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusPaidAs.FreeBet">
            <summary>
            FreeBet
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.BetBonusMode">
            <summary>
            Enum BetBonusMode
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusMode.All">
            <summary>
            All: all bets must win for bonus to be paid out
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Description"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription.AccaBonus">
            <summary>
            AccaBonus: default value, assumed if missing in the ticket)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription.OddsBooster">
            <summary>
            OddsBooster
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.BetBonusType">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Type"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetBonusType.Total">
            <summary>
            The total
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.BetReofferType">
            <summary>
            Defines possible values for <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer.Type"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetReofferType.Auto">
            <summary>
            If auto then stake will be present
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.BetReofferType.Manual">
            <summary>
            If manual you should wait for reoffer stake over Reply channel
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.CashoutAcceptance">
            <summary>
            Possible values of cashout acceptance
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.CashoutAcceptance.Accepted">
            <summary>
            The accepted value
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.CashoutAcceptance.Rejected">
            <summary>
            The rejected value
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.NonSrSettleAcceptance">
            <summary>
            Possible values of non-sr settle acceptance
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.NonSrSettleAcceptance.Accepted">
            <summary>
            The accepted value
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.NonSrSettleAcceptance.Rejected">
            <summary>
            The rejected value
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType">
            <summary>
            Possible values of the odds
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.None">
            <summary>
            Default behavior
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Any">
            <summary>
            Any odds change accepted
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Higher">
            <summary>
            Accept higher odds
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel">
            <summary>
            Possible values for senders communication channel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Internet">
            <summary>
            The internet
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Retail">
            <summary>
            The retail
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Terminal">
            <summary>
            The terminal
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Mobile">
            <summary>
            The mobile
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Sms">
            <summary>
            The SMS
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.CallCentre">
            <summary>
            The call centre
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.TvApp">
            <summary>
            The TV app
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SenderChannel.Agent">
            <summary>
            The agent
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.SourceType">
            <summary>
            Possible values used for getting Ccf history change report
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.Shop">
            <summary>
            Shop
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.Terminal">
            <summary>
            Terminal
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.Customer">
            <summary>
            Customer
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.Bookmaker">
            <summary>
            Bookmaker
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.SubBookmaker">
            <summary>
            SubBookmaker
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.SourceType.DistributionChannel">
            <summary>
            Distribution channel
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.StakeType">
            <summary>
            Enum of possible values for type of stake
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.StakeType.Total">
            <summary>
            The total
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.StakeType.Unit">
            <summary>
            The unit
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketAcceptance">
            <summary>
            Possible values of ticket acceptance
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketAcceptance.Accepted">
            <summary>
            The accepted value
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketAcceptance.Rejected">
            <summary>
            The rejected value
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketAckStatus">
            <summary>
            Possible values of the ticket acknowledgment status
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketAckStatus.Accepted">
            <summary>
            The accepted
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketAckStatus.Rejected">
            <summary>
            The rejected
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAcceptance">
            <summary>
            Possible values of ticket cancel acceptance
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAcceptance.Cancelled">
            <summary>
            The cancelled
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAcceptance.NotCancelled">
            <summary>
            The not cancelled
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAckStatus">
            <summary>
            Possible values for ticket cancel acknowledgment status
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAckStatus.Cancelled">
            <summary>
            The cancelled
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancelAckStatus.NotCancelled">
            <summary>
            The not cancelled
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason">
            <summary>
            Enum of possible reasons (codes) for ticket (bet) cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.CustomerTriggeredPrematch">
            <summary>
            The customer triggered prematch bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.TimeoutTriggered">
            <summary>
            The timeout triggered bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.BookmakerBackofficeTriggered">
            <summary>
            The bookmaker backoffice triggered bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.BookmakerTechnicalIssue">
            <summary>
            The bookmaker technical issue bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.ExceptionalBookmakerTriggered">
            <summary>
            The exceptional bookmaker triggered bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.BookmakerCashbackPromotionCancellation">
            <summary>
            The bookmaker cashback promotion cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.SogeiTriggered">
            <summary>
            The sogei triggered bet cancellation
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason.SccsTriggered">
            <summary>
            The SCCS triggered bet cancellation
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.TicketResponseType">
            <summary>
            Defines possible values for responses from MTS
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketResponseType.Ticket">
            <summary>
            The ticket
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketResponseType.TicketCancel">
            <summary>
            The ticket cancel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketResponseType.TicketCashout">
            <summary>
            The ticket cashout
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.TicketResponseType.TicketNonSrSettle">
            <summary>
            The ticket non-sportradar settle
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Enums.UfEnvironment">
            <summary>
            Possible values for UF environment
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.UfEnvironment.Integration">
            <summary>
            The integration
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Enums.UfEnvironment.Production">
            <summary>
            The production
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.ConnectionChangeEventArgs">
            <summary>
            An event argument used by events raised to provide message about connection state to the rabbit server
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.ConnectionChangeEventArgs.IsConnected">
            <summary>
            Gets an indicator if the connection is on or not
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.ConnectionChangeEventArgs.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.ConnectionChangeEventArgs.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.ConnectionChangeEventArgs"/> class
            </summary>
            <param name="isConnected">The ticketId</param>
            <param name="msg">The message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.MessageDeserializationFailedEventArgs">
            <summary>
            Event arguments for the MqMessageDeserializationFailed event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageDeserializationFailedEventArgs.RawData">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing message unprocessed data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.MessageDeserializationFailedEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.MessageDeserializationFailedEventArgs"/> class
            </summary>
            <param name="rawData">the name of the message which could not be deserialized, or a null reference if message name could not be retrieved</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs">
            <summary>
            Event arguments for the MqMessagePublishFailed event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs.RawData">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing message data
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs.CorrelationId">
            <summary>
            Gets the correlation id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs.RoutingKey">
            <summary>
            Gets the routing key to which data should be send
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs.ErrorMessage">
            <summary>
            Gets the description of the error
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs.#ctor(System.Collections.Generic.IEnumerable{System.Byte},System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.MessagePublishFailedEventArgs"/> class
            </summary>
            <param name="rawData">the name of the message which could not be deserialized, or a null reference if message name could
                                    not be retrieved</param>
            <param name="correlationId">The correlation id</param>
            <param name="routingKey">The routing key to which data should be send</param>
            <param name="message">The description of the error</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs">
            <summary>
            An event argument used by events raised when a message from the feed is received
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.JsonBody">
            <summary>
            Gets a <see cref="T:System.String"/> representing deserialized message
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.RoutingKey">
            <summary>
            Gets the routing key of the received message
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.CorrelationId">
            <summary>
            Gets the correlation id of the received message
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.ResponseType">
            <summary>
            Gets the expected type of the response.
            </summary>
            <value>The type of the response</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.AdditionalInfo">
            <summary>
            Gets the additional information
            </summary>
            <value>The additional information</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs.#ctor(System.String,System.String,System.String,Sportradar.MTS.SDK.Entities.Enums.TicketResponseType,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.MessageReceivedEventArgs"/> class
            </summary>
            <param name="body">A JSON string representing the received message</param>
            <param name="routingKey">A routing key</param>
            <param name="correlationId">A correlation id</param>
            <param name="expectedTicketResponseType">Expected ticket response type</param>
            <param name="additionalInfo">Additional information</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs">
            <summary>
            An event argument used by events raised to provide message about sdk or ticket state
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs.TicketId">
            <summary>
            Gets a ticketId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs.Ticket">
            <summary>
            Gets a associated ticket
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs.Message">
            <summary>
            Gets the message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs.#ctor(System.String,Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketMessageEventArgs"/> class
            </summary>
            <param name="id">The ticketId</param>
            <param name="ticket">The associated ticket</param>
            <param name="msg">The message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketResponseReceivedEventArgs">
            <summary>
            An event argument used by events raised when a response is received
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketResponseReceivedEventArgs.Response">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> representing received response
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketResponseReceivedEventArgs.Type">
            <summary>
            Gets a value indicating from which type of ticket is this response
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.TicketResponseReceivedEventArgs.#ctor(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketResponseReceivedEventArgs"/> class
            </summary>
            <param name="response">a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> representing the received response</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs">
            <summary>
            An event argument used by events raised when an attempt to send ticket failed
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs.TicketId">
            <summary>
            Gets a ticketId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs.TicketBody">
            <summary>
            Gets a ticket representation as json string
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs.ErrorMessage">
            <summary>
            Gets the error message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.TicketSendFailedEventArgs"/> class
            </summary>
            <param name="id">The ticketId</param>
            <param name="body">The json representation of the ticket</param>
            <param name="msg">The reason why sending failed</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.EventArguments.UnparsableMessageEventArgs">
            <summary>
            Event arguments of UnparsableMessageReceived event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.EventArguments.UnparsableMessageEventArgs.Body">
            <summary>
            Gets the <see cref="T:System.String"/> representation of the JSON body associated with the unparsable message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.EventArguments.UnparsableMessageEventArgs.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.EventArguments.UnparsableMessageEventArgs"/> class
            </summary>
            <param name="json">The string within the unparsable message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IAvailableSelections">
            <summary>
            Provides an available selections for a particular event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IAvailableSelections.Event">
            <summary>
            Gets the <see cref="T:System.String"/> of the event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IAvailableSelections.Markets">
            <summary>
            Gets the list of markets for this event
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ICalculation">
            <summary>
            Provides a probability calculation
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ICalculation.Odds">
            <summary>
            Gets the odds
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ICalculation.Probability">
            <summary>
            Gets the probability
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IMarket">
            <summary>
            Provides an available selections for a particular market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IMarket.Id">
            <summary>
            Gets the id of the market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IMarket.Specifiers">
            <summary>
            Gets the specifiers for this market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.IMarket.Outcomes">
            <summary>
            Gets the outcomes for this market
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection">
            <summary>
            Provides an requested selection
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection.EventId">
            <summary>
            Gets the event id.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection.MarketId">
            <summary>
            Gets the market id.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection.Specifiers">
            <summary>
            Gets the specifiers.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection.OutcomeId">
            <summary>
            Gets the outcome id.
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake">
            <summary>
            Defines a contract for alternative stake, mutually exclusive with reoffer
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake.Stake">
            <summary>
            Gets the stake
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds">
            <summary>
            Defines a contract for auto accepted odds
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds.SelectionIndex">
            <summary>
            Selection index from 'ticket.selections' array (zero based)
            </summary>
            <returns>Selection index from 'ticket.selections' array (zero based)</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds.RequestedOdds">
            <summary>
            Odds with which the ticket was placed
            </summary>
            <returns>Odds with which the ticket was placed</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds.UsedOdds">
            <summary>
            Odds with which the ticket was accepted
            </summary>
            <returns>Odds with which the ticket was accepted</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet">
            <summary>
            Defines a contract for a ticket bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.Bonus">
            <summary>
            Gets the bonus of the bet (optional, default null)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.FreeStake">
            <summary>
            Gets the free stkae of the bet (optional, default null)
            </summary>
            <value>The free stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.Stake">
            <summary>
            Gets the stake of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.EntireStake">
            <summary>
            Gets the entire stake of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.Id">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.SelectedSystems">
            <summary>
            Gets array of all the systems (optional, if missing then complete accumulator is used)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.Selections">
            <summary>
            Gets the array of selections which form the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.ReofferRefId">
            <summary>
            Gets the reoffer reference bet id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.SumOfWins">
            <summary>
            Gets the sum of all wins for all generated combinations for this bet (in ticket currency, used in validation)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.CustomBet">
            <summary>
            Gets the flag if bet is a custom bet (optional, default false)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.CalculationOdds">
            <summary>
            Gets the odds calculated for custom bet multiplied by 10_000 and rounded to int value
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake">
            <summary>
            Defines a contract for classes implementing the free stake
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.Value">
            <summary>
            Gets the Quantity multiplied by 10000 and rounded to a long value
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.Type">
            <summary>
            Gets the type of the free stake
            </summary>
            <value>(optional, default total)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.Description">
            <summary>
            The field description is optional. Clients will choose one of the pre-defined types:
            "freeBet" – default value, assumed if missing in the ticket
            "rollover"
            "moneyBack"
            "oddsBooster"
            "partialFreeBet"
            "other"
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake.PaidAs">
            <summary>
            The field PaidAs is optional, description of the bonus payment type:
            "cash" – default value, assumed if missing in the ticket
            "freeBet"
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus">
            <summary>
            Defines a contract for classes implementing the bet bonus
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Value">
            <summary>
            Gets the Quantity multiplied by 10000 and rounded to a long value
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Type">
            <summary>
            Gets the type of the bonus
            </summary>
            <value>(optional, default total)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Mode">
            <summary>
            Gets the Payout mode (optional, default proportional). Relevant mostly for system bets.
            Any: if at least one bet wins entire bonus is paid out.
            Proportional: paid out bonus is proportional to number of won bets.
            All: all bets must win for bonus to be paid out.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.Description">
            <summary>
            The field description is optional. Clients will choose one of the pre-defined types:
            "accaBonus" – default value, assumed if missing in the ticket
            "oddsBooster"
            "other"
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus.PaidAs">
            <summary>
            The field PaidAs is optional, description of the bonus payment type:
            "cash" – default value, assumed if missing in the ticket
            "freeBet"
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel">
            <summary>
            Defines a contract for bet-level cancellation
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel.BetId">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel.CancelPercent">
            <summary>
            Gets the cancel percent of the assigned bet
            </summary>
            <value>The cancel percent</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout">
            <summary>
            Defines a contract for bet-level cashout
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout.BetId">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout.CashoutStake">
            <summary>
            Gets the cashout stake of the assigned bet
            </summary>
            <value>The cashout stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout.CashoutPercent">
            <summary>
            Gets the cashout percent of the assigned bet
            </summary>
            <value>The cashout percent</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail">
            <summary>
            Defines a contract for bet-level response details
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail.BetId">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail.Reason">
            <summary>
            Gets the bet response reason.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail.SelectionDetails">
            <summary>
            Gets the array of selection details
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail.Reoffer">
            <summary>
            Gets the bet reoffer details (mutually exclusive with <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake"/>)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail.AlternativeStake">
            <summary>
            Gets the alternative stake, mutually exclusive with <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer"/>
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer">
            <summary>
            Defines a contract for bet reoffer details, mutually exclusive with <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake"/>
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer.Stake">
            <summary>
            Gets the stake
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer.Type">
            <summary>
            Gets the reoffer type. If auto then stake will be present. If manual you should wait for reoffer stake over Reply channel.
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcf">
            <summary>
            Defines a contract for a customer confidence factor
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcf.Ccf">
            <summary>
            Gets the customer confidence factor (factor multiplied by 10000)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcf.SportCcfDetails">
            <summary>
            Gets <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISportCcf"/> values for sport and prematch/live (if set for customer)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange">
            <summary>
            Defines a contract for objects containing CCF change data
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.Timestamp">
            <summary>
            Gets the timestamp of the ccf value change
            </summary>
            <value>The timestamp of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.BookmakerId">
            <summary>
            Gets the bookmaker id of the ccf value change
            </summary>
            <value>The bookmaker id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.SubBookmakerId">
            <summary>
            Gets the sub bookmaker id of the ccf value change
            </summary>
            <value>The sub bookmaker id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.SourceId">
            <summary>
            Gets the source id of the ccf value change
            </summary>
            <value>The source id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.SourceType">
            <summary>
            Gets the source type customer of the ccf value change
            </summary>
            <value>The source type customer of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.Ccf">
            <summary>
            Gets the customer confidence factor for the customer
            </summary>
            <value>The customer confidence factor for the customer</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.PreviousCcf">
            <summary>
            Gets the previous customer confidence factor for the customer
            </summary>
            <value>The previous customer confidence factor for the customer</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.SportId">
            <summary>
            Gets the sport id
            </summary>
            <value>The sport id</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.SportName">
            <summary>
            Gets the name of the sport
            </summary>
            <value>The name of the sport</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange.IsLive">
            <summary>
            Gets a value indicating whether the change was for live only
            </summary>
            <value><c>null</c> if [is live] contains no value, <c>true</c> if [is live]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer">
            <summary>
            Defines a contract for the identification of the end user (customer)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer.Ip">
            <summary>
            Gets the end user's ip
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer.LanguageId">
            <summary>
            Gets the 2-letter ISO 639-1 language code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer.DeviceId">
            <summary>
            Gets the device end user's device id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer.Id">
            <summary>
            Gets the end user's unique id (in client's system)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer.Confidence">
            <summary>
            Gets the suggested CCF of the customer multiplied by 10000 and rounded to a long value
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IRejectionInfo">
            <summary>
            Defines a contract for object carrying information about rejection
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IRejectionInfo.Id">
            <summary>
            Gets the rejected selection's related selection id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IRejectionInfo.EventId">
            <summary>
            Gets the rejected selection's related Betradar event (match or outright) id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IRejectionInfo.Odds">
            <summary>
            Gets the rejected selection's related Odds
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason">
            <summary>
            Defines a contract for object carrying information about rejection cause
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason.Code">
            <summary>
            Gets the reason code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason.Message">
            <summary>
            Gets the reason message
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason.InternalMessage">
            <summary>
            Gets the additional information about the error (internal exception message)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket">
            <summary>
            Defines a contract for classes representing base sdk ticket
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket.Version">
            <summary>
            Gets the ticket format version
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <remarks>Only used to relate ticket with its response</remarks>
            <value>The correlation identifier</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket.ToJson">
            <summary>
            Gets the json representation of the ticket which is sent to or received from MTS
            </summary>
            <returns>The json representation of the ticket which is sent to or received from MTS</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection">
            <summary>
            Defines a contract for ticket selection
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelection.EventId">
            <summary>
            Gets the Betradar event (match or outright) id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelection.Id">
            <summary>
            Gets the selection id
            </summary>
            <value>Should be composed according to specification</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelection.Odds">
            <summary>
            Gets the odds multiplied by 10000 and rounded to int value
            </summary>
            <remarks>It may be null for custom bets</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelection.IsBanker">
            <summary>
            Gets a value indicating whether this instance is banker
            </summary>
            <value><c>true</c> if this instance is banker; otherwise, <c>false</c></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelection.BoostedOdds">
            <summary>
            Gets the boosted odds multiplied by 10000 and rounded to int value
            </summary>
            <remarks>It is optional value</remarks>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionDetail">
            <summary>
            Defines a contract for per-selection rejection reasons
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionDetail.SelectionIndex">
            <summary>
            Gets the index of the selection
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionDetail.Reason">
            <summary>
            Gets the selection response reason
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionDetail.RejectionInfo">
            <summary>
            Gets the rejection information on selection level
            </summary>
            <value>The rejection information on selection level</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionRef">
            <summary>
            Defines a contract for selection references
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionRef.SelectionIndex">
            <summary>
            Gets the selection index from 'ticket.selections' array (zero based)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionRef.Banker">
            <summary>
            Gets a value indicating whether this <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelectionRef"/> is banker.
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISender">
            <summary>
            Defines a contract for a identification and settings of the ticket sender
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.BookmakerId">
            <summary>
            Gets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.Currency">
            <summary>
            Gets the 3 letter currency code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.LimitId">
            <summary>
            Gets the client's limit id (provided by Sportradar to the client)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.TerminalId">
            <summary>
            Gets the terminal id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.Channel">
            <summary>
            Gets the senders communication channel
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.ShopId">
            <summary>
            Gets the shop id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISender.EndCustomer">
            <summary>
            Gets the identification of the end user (customer)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ISportCcf">
            <summary>
            Defines a contract for a customer confidence factor values for sport and prematch/live (if set for customer)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISportCcf.SportId">
            <summary>
            Gets sport ID
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISportCcf.PrematchCcf">
            <summary>
            Gets customer confidence factor for the sport for prematch selections (factor multiplied by 10000)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ISportCcf.LiveCcf">
            <summary>
            Gets customer confidence factor for the sport for live selections (factor multiplied by 10000)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake">
            <summary>
            Defines a contract for classes implementing the stake of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IStake.Value">
            <summary>
            Gets the value
            </summary>
            <value>Quantity multiplied by 10000 and rounded to a long value</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.IStake.Type">
            <summary>
            Gets the type of the stake
            </summary>
            <value>(optional, default total)</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket">
            <summary>
            Contract defining Ticket that can be send to the MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.Bets">
            <summary>
            Gets the collection of all bets
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.Sender">
            <summary>
            Gets the identification and settings of the ticket sender
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.ReofferId">
            <summary>
            Gets the reoffer reference ticket id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.AltStakeRefId">
            <summary>
            Gets the alternative stake reference ticket id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.TestSource">
            <summary>
            Gets a value indicating whether this is for testing
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.OddsChange">
            <summary>
            Gets the type of the odds change Accept change in odds (optional, default none)
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.None"/>: default behavior
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Any"/>: any odds change accepted
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Higher"/>: accept higher odds
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.Selections">
            <summary>
            Gets the collection of all selections
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.TotalCombinations">
            <summary>
            Gets the expected total number of generated combinations on this ticket (optional, default null). If present, it is used to validate against actual number of generated combinations.
            </summary>
            <value>The total combinations</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.LastMatchEndTime">
            <summary>
            Gets end time of last (non Sportradar) match on ticket
            </summary>
            <value>End time of last (non Sportradar) match on ticket</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicket.PayCap">
            <summary>
            Capped max payout of the ticket
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck">
            <summary>
            Defines a contract for ticket acknowledgment ticket
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck.Code">
            <summary>
            Get the code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck.TicketStatus">
            <summary>
            Gets the status of the ticket
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel">
            <summary>
            Contract defining Ticket that can be send to the MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel.Code">
            <summary>
            Gets the cancellation code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel.CancelPercent">
            <summary>
            Gets the cancel percent
            </summary>
            <value>The cancel percent</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel.BetCancels">
            <summary>
            Gets the list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/>
            </summary>
            <value>The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/></value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck">
            <summary>
            Object that is send to MTS to acknowledge ticket cancellation
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck.Code">
            <summary>
            Gets the code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck.Message">
            <summary>
            Gets the message.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck.TicketCancelStatus">
            <summary>
            Gets the status of the ticket cancel
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse">
            <summary>
            Defines a contract for ticket cancellation response
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse.Status">
            <summary>
            Gets the status of the cancellation
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout">
            <summary>
            Contract defining Ticket that can be send to the MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout.CashoutStake">
            <summary>
            Gets the cashout stake
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout.CashoutPercent">
            <summary>
            Gets the cashout percent
            </summary>
            <value>The cashout percent</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout.BetCashouts">
            <summary>
            Gets the list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout"/>
            </summary>
            <value>The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout"/></value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse">
            <summary>
            Defines a contract for ticket submission response
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse.Status">
            <summary>
            Gets the status of the ticket cashout submission
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashoutResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle">
            <summary>
            Contract defining Ticket that can be send to the MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle.NonSrSettleStake">
            <summary>
            Gets the non-sportradar settle stake
            </summary>
            <remarks>If value is 0 means the ticket was not settled</remarks>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse">
            <summary>
            Defines a contract for ticket submission response
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse.Status">
            <summary>
            Gets the status of the ticket non-sportradar settle submission
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettleResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel">
            <summary>
            Contract defining Ticket that can be send to the MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse">
            <summary>
            Defines a contract for ticket submission response
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.Status">
            <summary>
            Gets the status of the ticket submission
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.Reason">
            <summary>
            Gets the response reason
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.BetDetails">
            <summary>
            Gets the bet details
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.Signature">
            <summary>
            Gets the response signature/hash (previous BetAcceptanceId)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.ExchangeRate">
            <summary>
            Gets the exchange rate used when converting currencies to EUR. Long multiplied by 10000 and rounded to a long value
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.AdditionalInfo">
            <summary>
            Gets the additional information about the response
            </summary>
            <value>The additional information</value>
            <remarks>Contains timestamps describing mts processing (receivedUtcTimestamp, validatedUtcTimestamp, respondedUtcTimestamp)</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse.AutoAcceptedOdds">
            <summary>
            Gets the automatic accepted odds
            </summary>
            <value>The automatic accepted odds</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._reofferRefId">
            <summary>
            The reoffer reference identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._betId">
            <summary>
            The bet identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._sum">
            <summary>
            The sum
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._selectedSystems">
            <summary>
            The selected systems
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._betBonus">
            <summary>
            The bet bonus
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._freeStake">
            <summary>
            The free stkae
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._stake">
            <summary>
            The stake
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._entireStake">
            <summary>
            The stake
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._selections">
            <summary>
            The list of all selections for this bet
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._customBet">
            <summary>
            The flag if bet is a custom bet (optional, default false)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder._calculationOdds">
            <summary>
            The odds calculated for custom bet multiplied by 10_000 and rounded to int value
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.GetSelectedSystems">
            <summary>
            Gets the array of selected systems
            </summary>
            <value>The array of selected systems</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.Create">
            <summary>
            Creates new <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/>
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetBetId(System.String)">
            <summary>
            Sets the bet id
            </summary>
            <param name="id">The  bet id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.AddSelectedSystem(System.Int32)">
            <summary>
            Add system to <see cref="P:Sportradar.MTS.SDK.Entities.Interfaces.IBet.SelectedSystems" />
            </summary>
            <param name="systemId">The system id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetReofferRefId(System.String)">
            <summary>
            Sets the reoffer reference bet id
            </summary>
            <param name="reofferRefId">The reoffer reference id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetSumOfWins(System.Int64)">
            <summary>
            Sets the sum of all wins for all generated combinations for this bet (in ticket currency, used for validation)
            </summary>
            <param name="sum">The sum to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetBetBonus(System.Int64,Sportradar.MTS.SDK.Entities.Enums.BetBonusMode,Sportradar.MTS.SDK.Entities.Enums.BetBonusType,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.BetBonusDescription},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.BetBonusPaidAs})">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="betBonusMode">The bet bonus mode</param>
            <param name="betBonusType">Type of the bet bonus</param>
            <param name="description">Description of the bet bonus</param>
            <param name="paidAs">PaidAs type of the bet bonus</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetFreeStake(System.Int64,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakeType},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakeDescription},System.Nullable{Sportradar.MTS.SDK.Entities.Enums.FreeStakePaidAs})">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="freeStakeType">Type of the free stake</param>
            <param name="description">Description of the free stake</param>
            <param name="paidAs">PaidAs type of the free stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetStake(System.Int64)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetStake(System.Int64,Sportradar.MTS.SDK.Entities.Enums.StakeType)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="stakeType">Type of the stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetEntireStake(System.Int64)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetEntireStake(System.Int64,Sportradar.MTS.SDK.Entities.Enums.StakeType)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IStake" />
            </summary>
            <param name="value">The quantity multiplied by 10000 and rounded to a long value</param>
            <param name="stakeType">Type of the stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.AddSelection(Sportradar.MTS.SDK.Entities.Interfaces.ISelection)">
            <summary>
            Adds the selection
            </summary>
            <param name="selection">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" /> to be added to this bet</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.GetSelections">
            <summary>
            Gets the selections
            </summary>
            <returns>Returns all the selections</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetCustomBet(System.Nullable{System.Boolean})">
            <summary>
            Sets the flag if bet is a custom bet (optional, default false)
            </summary>
            <param name="customBet">The flag if bet is a custom bet (optional, default false)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.SetCalculationOdds(System.Nullable{System.Int32})">
            <summary>
            Sets the odds calculated for custom bet multiplied by 10_000 and rounded to int value
            </summary>
            <param name="calculationOdds">The odds calculated for custom bet multiplied by 10_000 and rounded to int value</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BetBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory">
            <summary>
            A class used to construct builder instances used when constructing tickets and it's associated entities
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.IBuilderFactory" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory._config">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> used to set default values of created builders
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.#ctor(Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationInternal,Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory"/> class
            </summary>
            <param name="config">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationInternal"/> used to set default values of created builders</param>
            <param name="marketDescriptionProvider">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionProvider"/> used for UoF selections</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketCancelBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketReofferCancelBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketCashoutBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateSenderBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateSelectionBuilder(System.Boolean)">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /> class
            </summary>
            <param name="isCustomBet">Indicating if selection is for custom bet or not</param>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketAckBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAckBuilder" /> class</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketCancelAckBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelAckBuilder" /> class</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.BuilderFactory.CreateTicketNonSrSettleBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" /> class</returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.CustomBetSelectionBuilder">
            <summary>
            The run-time implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ICustomBetSelectionBuilder"/> interface
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder">
            <summary>
            Class SelectionBuilder
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder._eventId">
            <summary>
            The event identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder._selectionId">
            <summary>
            The selection identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder._odds">
            <summary>
            The odds
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder._isBanker">
            <summary>
            The is banker
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder._isCustomBet">
            <summary>
            The is custom bet
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.#ctor(Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionProvider,Sportradar.MTS.SDK.Entities.ISdkConfiguration,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.Create">
            <summary>
            Creates new <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/>
            </summary>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetEventId(System.Int64)">
            <summary>
            Sets the Betradar event (match or outright) id
            </summary>
            <param name="eventId">The event identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetEventId(System.String)">
            <summary>
            Sets the Betradar event (match or outright) id
            </summary>
            <param name="eventId">The event identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetId(System.String)">
            <summary>
            Sets the selection id
            </summary>
            <param name="id">The identifier</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
            <value>Should be composed according to specification</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetIdLo(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sets the identifier lo
            </summary>
            <param name="type">The type</param>
            <param name="subType">Type of the sub</param>
            <param name="sov">The sov</param>
            <param name="selectionId">The selection ids</param>
            <returns>ISelectionBuilder</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetIdLcoo(System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Sets the identifier lcoo
            </summary>
            <param name="type">The type</param>
            <param name="sportId">The sport identifier</param>
            <param name="sov">The sov</param>
            <param name="selectionId">The selection ids</param>
            <returns>ISelectionBuilder</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetIdUof(System.Int32,System.String,System.Int32,System.String,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the selection id for UOF
            </summary>
            <param name="product">The product to be used</param>
            <param name="sportId">The UF sport id</param>
            <param name="marketId">The UF market id</param>
            <param name="selectionId">The selection id</param>
            <param name="specifiers">The UF array of specifiers represented as string separated with '|'</param>
            <param name="sportEventStatus">The UF sport event status properties</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <value>Should be composed according to specification</value>
            <example>
            SetIdUof(1, "sr:sport:1", 101, "10", "total=3.0|playerid=sr:player:10201");
            </example>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetIdUof(System.Int32,System.String,System.Int32,System.String,System.Collections.Generic.IReadOnlyDictionary{System.String,System.String},System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
            Sets the selection id for UOF
            </summary>
            <param name="product">The product to be used</param>
            <param name="sportId">The UF sport id</param>
            <param name="marketId">The UF market id</param>
            <param name="selectionId">The selection id</param>
            <param name="specifiers">The array of specifiers</param>
            <param name="sportEventStatus">The UF sport event status properties</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <value>Should be composed according to specification</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetOdds(System.Int32)">
            <summary>
            Sets the odds multiplied by 10000 and rounded to int value
            </summary>
            <param name="odds">The odds value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.Set(System.Int64,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" /> properties
            </summary>
            <param name="eventId">The event id</param>
            <param name="id">The selection id</param>
            <param name="odds">The odds value to be set</param>
            <param name="isBanker"></param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.Set(System.String,System.String,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Sets the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" /> properties
            </summary>
            <param name="eventId">The event id</param>
            <param name="id">The selection id</param>
            <param name="odds">The odds value to be set</param>
            <param name="isBanker"></param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetBanker(System.Boolean)">
            <summary>
            Sets the banker property
            </summary>
            <param name="isBanker">if set to <c>true</c> [is banker]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.SetBoostedOdds(System.Nullable{System.Int32})">
            <summary>
            Sets the boosted odds multiplied by 10000 and rounded to int value
            </summary>
            <param name="boostedOdds">The boosted odds value to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISelectionBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SelectionBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/> for creating <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISender"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._bookmakerId">
            <summary>
            The bookmaker identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._currency">
            <summary>
            The currency
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._terminalId">
            <summary>
            The terminal identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._channel">
            <summary>
            The channel
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._shopId">
            <summary>
            The shop identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._customer">
            <summary>
            The customer
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._limitId">
            <summary>
            The limit identifier
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder"/> class
            </summary>
            <param name="config">The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> providing default builder values</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.#ctor(System.Int32,System.Int32,System.String,Sportradar.MTS.SDK.Entities.Enums.SenderChannel)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="limitId">The limit identifier</param>
            <param name="currency">The currency</param>
            <param name="channel">The channel</param>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._section">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection"/> loaded from app.config
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder._sectionLoaded">
            <summary>
            Value indicating whether an attempt to load the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection"/> was already made
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.Create(System.Int32,System.Int32,System.String,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.SenderChannel})">
            <summary>
            Creates the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder"/>
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="limitId">The limit identifier</param>
            <param name="currency">The currency</param>
            <param name="channel">The channel</param>
            <returns>ISenderBuilder</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Sets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetCurrency(System.String)">
            <summary>
            Sets the 3 letter currency code
            </summary>
            <param name="currency">The currency</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetTerminalId(System.String)">
            <summary>
            Sets the terminal id
            </summary>
            <param name="terminalId">The terminal id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetSenderChannel(Sportradar.MTS.SDK.Entities.Enums.SenderChannel)">
            <summary>
            Sets the senders communication channel
            </summary>
            <param name="channel">The channel</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetShopId(System.String)">
            <summary>
            Sets the shop id
            </summary>
            <param name="shopId">The shop id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetLimitId(System.Int32)">
            <summary>
            Sets the client's limit id (provided by Sportradar to the client)
            </summary>
            <param name="limitId">The limit id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetEndCustomer(Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer)">
            <summary>
            Set the identification of the end user (customer)
            </summary>
            <param name="customer">The end customer to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.SetEndCustomer(System.Net.IPAddress,System.String,System.String,System.String,System.Int64)">
            <summary>
            Set the identification of the end user (customer)
            </summary>
            <param name="ip">The ip address of the end customer</param>
            <param name="customerId">The customer id</param>
            <param name="languageId">The language id</param>
            <param name="deviceId">The device id</param>
            <param name="confidence">The confidence</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISenderBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SenderBuilder.Build">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISender" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory">
            <summary>
            A class used to construct simple builder instances(those not needing configuration) used when constructing tickets and it's associated entities
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory.CreateTicketBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory.CreateTicketReofferBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory.CreateEndCustomerBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IEndCustomerBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory.CreateBetBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.IBetBuilder" /> class</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory.CreateAltStakeBuilder">
            <summary>
            Constructs and returns a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder" /> class
            </summary>
            <returns>A new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder" /> class</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.#ctor(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder"/> class
            </summary>
            <param name="builderFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory"/> used to construct entity builders</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.Create">
            <summary>
            Creates new <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/>
            </summary>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="ticketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new alternative stake ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new alternative stake ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketAltStakeBuilder" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.BuildTicket">
            <summary>
            Builds the new <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.BuildAltStakeTicket(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory,Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Builds the alternative stake ticket based on the original ticket and the ticket response
            </summary>
            <param name="builderFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory"/> used to construct entity builders</param>
            <param name="orgTicket">The original ticket</param>
            <param name="ticketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new alternative ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> representing the alternative ticket</returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
            <exception cref="T:System.ArgumentException">Only tickets with exactly 1 bet are supported</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketAltStakeBuilder.BuildAltStakeTicket(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory,Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Builds the alternative stake ticket based on the original ticket and the ticket response
            </summary>
            <param name="builderFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory"/> used to construct entity builders</param>
            <param name="orgTicket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new alternative ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> representing the alternative ticket</returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
            <exception cref="T:System.ArgumentException">Only tickets with exactly 1 bet are supported</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" />
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._ticketId">
            <summary>
            The ticket identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._reofferId">
            <summary>
            The reoffer identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._altStakeRefId">
            <summary>
            The alt stake reference identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._isTest">
            <summary>
            The is test
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._oddsChangeType">
            <summary>
            The odds change type
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._sender">
            <summary>
            The sender
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._bets">
            <summary>
            The bets
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._totalCombinations">
            <summary>
            The total combinations
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder._lastMatchEndTime">
            <summary>
            End time of last (non Sportradar) match on ticket
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.Create">
            <summary>
            Creates the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/>
            </summary>
            <returns>Return a new instance of <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetReofferId(System.String)">
            <summary>
            Sets the reoffer id
            </summary>
            <param name="reofferId">The reoffer id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetAltStakeRefId(System.String)">
            <summary>
            Sets the alternative stake reference ticket id
            </summary>
            <param name="altStakeRefId">The alt stake reference id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetTestSource(System.Boolean)">
            <summary>
            Sets the test source
            </summary>
            <param name="isTest">if set to <c>true</c> [is test]</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetOddsChange(Sportradar.MTS.SDK.Entities.Enums.OddsChangeType)">
            <summary>
            Sets the odds change
            </summary>
            <param name="type">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType" /> to be set</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetSender(Sportradar.MTS.SDK.Entities.Interfaces.ISender)">
            <summary>
            Sets the sender
            </summary>
            <param name="sender">The ticket sender</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetTotalCombinations(System.Int32)">
            <summary>
            Sets the expected total number of generated combinations on this ticket (optional, default null). If present, it is used to validate against actual number of generated combinations.
            </summary>
            <param name="totalCombinations">The expected total number of generated combinations</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.SetLastMatchEndTime(System.DateTime)">
            <summary>
            End time of last (non Sportradar) match on ticket
            </summary>
            <param name="lastMatchEndTime">End time of last (non Sportradar) match on ticket</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.GetBets">
            <summary>
            Gets the bets
            </summary>
            <returns>Returns all the bets</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketBuilder.AddBet(Sportradar.MTS.SDK.Entities.Interfaces.IBet)">
            <summary>
            Adds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" />
            </summary>
            <param name="bet">A <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" /> to be added to this ticket</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketBuilder" /></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._ticketId">
            <summary>
            The ticket identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._bookmakerId">
            <summary>
            The bookmaker identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._code">
            <summary>
            The code
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._percent">
            <summary>
            The percent
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._betCancels">
            <summary>
            The bet cancels
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder"/> class
            </summary>
            <param name="config">A <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> providing configuration for the associated sdk instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._section">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> loaded from app.config
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._sectionLoaded">
            <summary>
            Value indicating whether an attempt to load the <see cref="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder._section"/> was already made
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.Create(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to cancel
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.SetCode(Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason)">
            <summary>
            Sets the cancellation code
            </summary>
            <param name="code">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason" /></param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.SetCancelPercent(System.Int32)">
            <summary>
            Sets the percent of cancellation
            </summary>
            <param name="percent">The percent of cancellation</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.AddBetCancel(System.String,System.Nullable{System.Int32})">
            <summary>
            Add the bet cancel
            </summary>
            <param name="betId">The bet id</param>
            <param name="percent">The cancel percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a int value)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCancelBuilder.BuildTicket(System.String,System.Int32,Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason)">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <param name="code">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason" /></param>
            <returns>Return an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._ticketId">
            <summary>
            The ticket identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._bookmakerId">
            <summary>
            The bookmaker identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._stake">
            <summary>
            The cashout stake
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._percent">
            <summary>
            The cashout percent
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._betCashouts">
            <summary>
            The list of bet cashouts
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder"/> class
            </summary>
            <param name="config">The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> providing configuration for the associated sdk instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._section">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> loaded from app.config
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder._sectionLoaded">
            <summary>
            Value indicating whether an attempt to load the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> was already made
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.Create(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to Cashout
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" /></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.SetCashoutStake(System.Int64)">
            <summary>
            Sets the cashout stake
            </summary>
            <param name="stake">The cashout stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.SetCashoutPercent(System.Int32)">
            <summary>
            Sets the cashout percent
            </summary>
            <param name="percent">The cashout percent</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.AddBetCashout(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Add the bet cashout
            </summary>
            <param name="betId">The bet id</param>
            <param name="stake">The cashout stake value of the assigned bet (quantity multiplied by 10_000 and rounded to a long value)</param>
            <param name="percent">The cashout percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a int value)</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCashoutBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketCashoutBuilder.BuildTicket(System.String,System.Int32,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <param name="stake">The cashout stake</param>
            <param name="percent">The cashout percent</param>
            <returns>Return an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder._ticketId">
            <summary>
            The ticket identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder._bookmakerId">
            <summary>
            The bookmaker identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder._stake">
            <summary>
            The non-sportradar settlement stake
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder"/> class
            </summary>
            <param name="config">The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> providing configuration for the associated sdk instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder.SetNonSrSettleStake(System.Int64)">
            <summary>
            Sets the cashout stake
            </summary>
            <param name="stake">The cashout stake</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketNonSrSettleBuilder.SetTicketId(System.String)">
            <summary>
            Sets the ticket id to Cashout
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketNonSrSettleBuilder" /></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.#ctor(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder"/> class
            </summary>
            <param name="builderFactory">The <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory"/> used to construct entity builders</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.Create">
            <summary>
            Creates new <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/>
            </summary>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="ticketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder" /></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.Set(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Sets the original ticket and the ticket response
            </summary>
            <param name="ticket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferBuilder"/></returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.BuildTicket">
            <summary>
            Builds the new <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" /></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.BuildReofferTicket(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory,Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Interfaces.ITicketResponse,System.String)">
            <summary>
            Builds the reoffer ticket based on the original ticket and the ticket response
            </summary>
            <param name="builderFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory"/> used to construct entity builders</param>
            <param name="orgTicket">The original ticket</param>
            <param name="orgTicketResponse">The ticket response from which the stake info will be used</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <exception cref="T:System.ArgumentNullException">Ticket and TicketResponse are mandatory</exception>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> representing the reoffer</returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
            <exception cref="T:System.ArgumentException">Only tickets with exactly 1 bet are supported</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferBuilder.BuildReofferTicket(Sportradar.MTS.SDK.Entities.Builders.ISimpleBuilderFactory,Sportradar.MTS.SDK.Entities.Interfaces.ITicket,System.Int64,System.String)">
            <summary>
            Builds the reoffer ticket based on the original ticket and the ticket response
            </summary>
            <param name="builderFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.SimpleBuilderFactory"/> used to construct entity builders</param>
            <param name="orgTicket">The original ticket</param>
            <param name="newStake">The new stake value which will be used to set bet stake</param>
            <param name="newTicketId">The new reoffer ticket id</param>
            <exception cref="T:System.ArgumentNullException">Ticket nad new stake are mandatory</exception>
            <returns>Returns the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket"/> representing the reoffer</returns>
            <remarks>Only tickets with exactly 1 bet are supported</remarks>
            <exception cref="T:System.ArgumentException">Only tickets with exactly 1 bet are supported</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder">
            <summary>
            Implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder._ticketId">
            <summary>
            The ticket identifier
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder._bookmakerId">
            <summary>
            The bookmaker identifier
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder"/> class
            </summary>
            <param name="config">The <see cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration"/> providing configuration for associated sdk instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder._section">
            <summary>
            The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> loaded from app.config
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder._sectionLoaded">
            <summary>
            Value indicating whether an attempt to load the <see cref="F:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder._section"/> was already made
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.Create(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <returns>Returns an <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder"/></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.SetTicketId(System.String)">
            <summary>
            Sets the reoffer ticket id to cancel
            </summary>
            <param name="ticketId">The ticket id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketReofferCancelBuilder" /></returns>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.SetBookmakerId(System.Int32)">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Builders.ITicketCancelBuilder" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.BuildTicket">
            <summary>
            Builds the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" />
            </summary>
            <returns>Returns a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" /></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Builders.TicketReofferCancelBuilder.BuildTicket(System.String,System.Int32)">
            <summary>
            Build a <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
            </summary>
            <param name="ticketId">The ticket id</param>
            <param name="bookmakerId">The bookmaker id</param>
            <returns>Return an <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionCache">
            <summary>
            Defines a contract implemented by classes used to cache market descriptions
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionCache.GetMarketDescriptorAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Asynchronously gets a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem" /> instance for the market specified by <code>id</code> and <code>specifiers</code>
            </summary>
            <param name="marketId">The market identifier</param>
            <param name="variant">A <see cref="T:System.String" /> specifying market variant or a null reference if market is invariant</param>
            <param name="cultures">A <see cref="T:System.Collections.Generic.IEnumerable`1" /> specifying required translations</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async retrieval operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException">The requested key was not found in the cache and could not be loaded</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionCache" /> implementation used to store market descriptors for invariant markets
            </summary>
            <seealso cref="T:System.IDisposable" />
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.IMarketDescriptionCache" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.CacheLog">
            <summary>
            A <see cref="T:log4net.ILog"/> instance for execution logging
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.ExecutionLog">
            <summary>
            A <see cref="T:log4net.ILog"/> instance for execution logging
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.Cache">
            <summary>
            A <see cref="T:System.Runtime.Caching.ObjectCache"/> used to store market descriptors
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache._dataProvider">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> used to fetch market descriptors
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache._fetchedLanguages">
            <summary>
            A <see cref="T:System.Collections.Generic.ISet`1"/> used to store languages for which the data was already fetched (at least once)
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache._semaphore">
            <summary>
            A <see cref="T:System.Threading.SemaphoreSlim"/> instance to synchronize access from multiple threads
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache._isDisposed">
            <summary>
            Value indicating whether the current instance was already disposed
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.#ctor(System.Runtime.Caching.ObjectCache,Sportradar.MTS.SDK.Entities.Internal.IDataProvider{System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketDescriptionDTO}},System.String,System.TimeSpan,System.Runtime.Caching.CacheItemPolicy)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache"/> class
            </summary>
            <param name="cache">A <see cref="T:System.Runtime.Caching.ObjectCache"/> used to store market descriptors</param>
            <param name="dataProvider">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> used to fetch market descriptors</param>
            <param name="accessToken">The <see cref="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.AccessToken"/> used to access UF REST API</param>
            <param name="fetchInterval">The fetch interval</param>
            <param name="cacheItemPolicy">The cache item policy</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.GetItemFromCache(System.Int32)">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> specified by it's id from the local cache
            </summary>
            <param name="id">The id of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> to get</param>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> retrieved from the cache or a null reference if item is not found</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.GetMissingTranslations(Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Gets a <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing <see cref="T:System.Globalization.CultureInfo"/> instances from provided <code>requiredTranslations</code>
            which translations are not found in the provided <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/>
            </summary>
            <param name="item">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> instance, or a null reference</param>
            <param name="requiredTranslations">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the required languages</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing missing translations or a null reference if none of the translations are missing</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.Merge(System.Globalization.CultureInfo,System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketDescriptionDTO})">
            <summary>
            Merges the provided descriptions with those found in cache
            </summary>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> specifying the language of the <code>descriptions</code></param>
            <param name="descriptions">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing market descriptions in specified language</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.GetMarketInternalAsync(System.Int32,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Asynchronously gets the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> specified by it's id. If the item is not found in local cache, all items for specified
            language are fetched from the service and stored/merged into the local cache.
            </summary>
            <param name="id">The id of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> instance to get</param>
            <param name="cultures">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the languages which the returned item must contain</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">An error occurred while accessing the remote party</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">An error occurred while deserializing fetched data</exception>
            <exception cref="T:System.FormatException">An error occurred while mapping deserialized entities</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.FetchMarketDescriptionsAsync(System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Asynchronously gets the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> specified by it's id. If the item is not found in local cache, all items for specified
            language are fetched from the service and stored/merged into the local cache.
            </summary>
            <param name="cultures">A <see cref="T:System.Collections.Generic.IEnumerable`1"/> specifying the languages which the returned item must contain</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">An error occurred while accessing the remote party</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">An error occurred while deserializing fetched data</exception>
            <exception cref="T:System.FormatException">An error occurred while mapping deserialized entities</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.Finalize">
            <summary>
            Disposes un-managed resources associated with the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.GetMarketDescriptorAsync(System.Int32,System.String,System.Collections.Generic.IEnumerable{System.Globalization.CultureInfo})">
            <summary>
            Gets the market descriptor.
            </summary>
            <param name="marketId">The market identifier</param>
            <param name="variant">A <see cref="T:System.String"/> specifying market variant or a null reference if market is invariant</param>
            <param name="cultures">The cultures</param>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException">The requested key was not found in the cache and could not be loaded</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.RegisterHealthCheck">
            <summary>
            Registers the health check which will be periodically triggered
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCache.StartHealthCheck">
            <summary>
            Starts the health check and returns <see cref="T:Metrics.HealthCheckResult"/>
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem.Build(Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketDescriptionDTO,System.Globalization.CultureInfo)">
            <summary>
            Constructs and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/> from the provided DTO
            </summary>
            <param name="dto">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketDescriptionDTO"/> containing market description data</param>
            <param name="culture">A <see cref="T:System.Globalization.CultureInfo"/> specifying the language of the provided DTO</param>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem"/></returns>
            <exception cref="T:System.InvalidOperationException">The cache item could not be build from the provided DTO</exception>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionProvider.ExecutionLog">
            <summary>
            A <see cref="T:log4net.ILog"/> instance for execution logging
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionProvider.GetMarketDescriptorAsync(System.Int32,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionCacheItem" /> instance for the market specified by <code>id</code> and <code>specifiers</code>
            </summary>
            <param name="marketId">The market identifier</param>
            <param name="variant">A <see cref="T:System.String" /> specifying market selectionId or a null reference if market is invariant</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async retrieval operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CacheItemNotFoundException">The requested key was not found in the cache and could not be loaded</exception>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions"/> instance containing data used to construct <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper"/> class
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions"/> instance containing data used to construct <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper.Sportradar#MTS#SDK#Entities#Internal#REST#ISingleTypeMapper{System#Collections#Generic#IEnumerable{Sportradar#MTS#SDK#Entities#Internal#REST#Dto#MarketDescriptionDTO}}#Map">
            <summary>
            Maps it's data to <see cref="T:System.Collections.Generic.IEnumerable`1"/> instance
            </summary>
            <returns>The created<see cref="T:System.Collections.Generic.IEnumerable`1"/> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapperFactory">
            <summary>
            Class MarketDescriptionsMapperFactory
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions)">
            <summary>
            Creates and returns an instance of Mapper for mapping <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions"/>
            </summary>
            <param name="data">A input instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper"/> will map</param>
            <returns>New <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketDescriptionsMapper" /> instance</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketMappingCacheItem.Build(Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketMappingDTO)">
            <summary>
            Constructs and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketMappingCacheItem"/> from the provided DTO
            </summary>
            <param name="dto">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketMappingDTO"/> containing mapping data</param>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Cache.MarketMappingCacheItem"/></returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.CalculateProbabilityProvider">
            <summary>
            An implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.ICalculateProbabilityProvider"/> which fetches the data, deserializes it and than maps / converts it
            to the output type
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CalculateProbabilityProvider.#ctor(System.String,Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster,Sportradar.MTS.SDK.Common.Internal.IDeserializer{Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType},Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory{Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType,Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.CalculateProbabilityProvider" /> class.
            </summary>
            <param name="uriFormat">The url format specifying the url of the resources fetched by the fetcher</param>
            <param name="poster">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster" /> used to fetch the data</param>
            <param name="deserializer">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1" /> used to deserialize the fetch data</param>
            <param name="mapperFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2" /> used to construct instances of <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CalculateProbabilityProvider.GetDataAsync(System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection})">
            <summary>
            Asynchronously gets a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO"/> instance
            </summary>
            <param name="selections">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing selections for which the probability should be fetched</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the probability calculation</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.AvailableSelections">
            <summary>
            Implements methods used to access available selections for the event
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.AvailableSelections.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.AvailableSelections"/> class
            </summary>
            <param name="availableSelections">a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO"/> representing the available selections</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Calculation">
            <summary>
            Implements methods used to provides a probability calculation
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Calculation.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Calculation"/> class
            </summary>
            <param name="calculation">a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO"/> representing the calculation</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Market">
            <summary>
            Implements methods used to access available selections for the market
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Market.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Market"/> class
            </summary>
            <param name="market">a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO"/> representing the market</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Selection">
            <summary>
            Implements methods used to provides an requested selection
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Selection.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.CustomBetImpl.Selection"/> class
            </summary>
            <param name="eventId">a <see cref="T:System.String"/> representing the event id</param>
            <param name="marketId">a value representing the market id</param>
            <param name="specifiers">a value representing the specifiers</param>
            <param name="outcomeId">a value representing the outcome id</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2">
            <summary>
            An implementation of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/> which fetches the data, deserializes it and than maps / converts it
            to the output type
            </summary>
            <typeparam name="TIn">Specifies the type of DTO instance which will be mapped to returned instance</typeparam>
            <typeparam name="TOut">Specifies the type of instances provided</typeparam>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2._fetcher">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher"/> used to fetch the data
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2._poster">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster"/> used to fetch the data
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2._deserializer">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1"/> used to deserialize the fetch data
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2._mapperFactory">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2"/> used to construct instances of <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2._uriFormat">
            <summary>
            The url format specifying the url of the resources fetched by the fetcher
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.#ctor(System.String,Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher,Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster,Sportradar.MTS.SDK.Common.Internal.IDeserializer{`0},Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2" /> class
            </summary>
            <param name="uriFormat">The url format specifying the url of the resources fetched by the fetcher</param>
            <param name="fetcher">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher" /> used to fetch the data</param>
            <param name="poster">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.Rest.IDataPoster" /> used to fetch the data</param>
            <param name="deserializer">A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1" /> used to deserialize the fetch data</param>
            <param name="mapperFactory">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2" /> used to construct instances of <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /></param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetDataAsyncInternal(System.String,System.Uri)">
            <summary>
            Fetches and deserializes the data from the provided <see cref="T:System.Uri"/>.
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="uri">A <see cref="T:System.Uri"/> specifying the data location</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.PostDataAsyncInternal(System.String,System.Net.Http.HttpContent,System.Uri)">
            <summary>
            Fetches and deserializes the data from the provided <see cref="T:System.Uri"/>.
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="authorization">The value of authorization header</param>
            <param name="uri">A <see cref="T:System.Uri"/> specifying the data location</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the ongoing operation</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetRequestUri(System.Object[])">
            <summary>
            Constructs and returns an <see cref="T:System.Uri"/> instance used to retrieve resource with specified <code>id</code>
            </summary>
            <param name="identifiers">Identifiers uniquely identifying the data to fetch</param>
            <returns>an <see cref="T:System.Uri"/> instance used to retrieve resource with specified <code>identifiers</code></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetDataAsync(System.String)">
            <summary>
            Get the data as an asynchronous operation
            </summary>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetDataAsync(System.String,System.String)">
            <summary>
            Get the data as an asynchronous operation
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo" /></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1" /> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetDataAsync(System.String[])">
            <summary>
            Asynchronously gets a <typeparamref name="TOut"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.GetDataAsync(System.String,System.String[])">
            <summary>
            Asynchronously gets a <typeparamref name="TOut"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.PostDataAsync(System.Net.Http.HttpContent,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.PostDataAsync(System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="authorization">The value of authorization header</param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.PostDataAsync(System.Net.Http.HttpContent,System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DataProvider`2.PostDataAsync(System.String,System.Net.Http.HttpContent,System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="authorization">The value of authorization header</param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Deserializer`1">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1" /> implementation which uses <see cref="P:System.Xml.XmlElement.LocalName" /> property to determine to
            which type the data should be deserialized
            </summary>
            <typeparam name="T">Specifies the type that can be deserialized</typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Deserializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize the provided<see cref="T:System.Byte"/> array to a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.RestMessage"/> derived instance
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> instance containing data to be deserialized </param>
            <returns>The <code>data</code> deserialized to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.RestMessage"/> instance</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Deserializer`1.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte" /> array to a <typeparamref name="T1" /> instance
            </summary>
            <typeparam name="T1">A <typeparamref name="T" /> derived type specifying the target of deserialization</typeparam>
            <param name="stream">A <see cref="T:System.IO.Stream" /> instance containing data to be deserialized</param>
            <returns>The <code>data</code> deserialized to <typeparamref name="T1" /> instance</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Deserializer`1.NamespaceIgnorantXmlTextReader">
            <summary>
            A <see cref="T:System.Xml.XmlReader"/> derived class, which is capable of deserializing Odds Feed REST messages. Those messages have schema issues
            which this class handles. Once the schema issues are fixed this class will be removed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DeserializerBase.BaseTypes">
            <summary>
            A list of <see cref="T:System.Type"/> specifying base types which are supported by the deserializer. All subclasses
            of the specified types can be deserialized by the deserializer
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.DeserializerBase.Serializers">
            <summary>
            A <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2"/> containing serializers for all supported types
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.DeserializerBase.InitDeserializer">
            <summary>
            Initializes the <code>Serializers</code> static field
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO.Ccf">
            <summary>Customer Confidence Factor (factor multiplied by 10000)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO.SportCcfDetails">
            <summary>CCF values for sport and prematch/live (if set for customer)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.Anonymous.SportId">
            <summary>Sport ID</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.Anonymous.PrematchCcf">
            <summary>Customer Confidence Factor for the sport for prematch selections (factor multiplied by 10000)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.Anonymous.LiveCcf">
            <summary>Customer Confidence Factor for the sport for live selections (factor multiplied by 10000)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO.TicketId">
            <summary>Ticket ID (from the original response)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO.MaxStake">
            <summary>Maximum reoffer stake (quantity multiplied by 10000 and rounded to a long value)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO">
            <summary>
            Defines a data-transfer-object for available selections for the event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO.Event">
            <summary>
            Gets the <see cref="T:System.String"/> of the event
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO.Markets">
            <summary>
            Gets the list of markets for this event
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO">
            <summary>
            Defines a data-transfer-object for probability calculations
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO.Odds">
            <summary>
            Gets the odds
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO.Probability">
            <summary>
            Gets the probability
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO">
            <summary>
            Defines a data-transfer-object for available selections for the market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO.Id">
            <summary>
            Gets the id of the market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO.Specifiers">
            <summary>
            Gets the specifiers for this market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.MarketDTO.Outcomes">
            <summary>
            Gets the outcomes for this market
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketAck.TicketAckDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelAck.TicketCancelAckDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.Reason">
            <summary>Object carrying information about cancellation response</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.Reason.Code">
            <summary>Cancellation code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.Reason.Message">
            <summary>Cancellation rejection reason description</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.Result.TicketId">
            <summary>Ticket id</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.Status">
            <summary>Cancellation status - cancelled, not_cancelled</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.TicketCancelResponseDTO">
            <summary>Ticket cancel response 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.TicketCancelResponseDTO.Signature">
            <summary>Response signature (previous betAcceptanceId)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancelResponse.TicketCancelResponseDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Anonymous">
            <summary>
            Class Anonymous for BetCancel
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Anonymous.Id">
            <summary>Bet id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Anonymous.CancelPercent">
            <summary>Cancel percent. Quantity multiplied by 10_000 and rounded to a long value. Max 100%.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.TimestampUtc">
            <summary>Timestamp of ticket cancel placement (in UNIX time millis)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.TicketId">
            <summary>Ticket id to cancel (in the client's system)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.Sender">
            <summary>Identification and settings of the ticket sender</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.Code">
            <summary>Cancellation code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.CancelPercent">
            <summary>Cancel percent. Quantity multiplied by 10_000 and rounded to a long value. Only applicable if cancelling whole ticket. Max 100%.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.BetCancel">
            <summary>Array of (betId, cancelPercent) pairs, if performing partial cancellation. Applicable only if ticket-level cancel percent is null.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Cancel.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.TicketCancelDTO">
            <summary>Ticket cancel version 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.TicketCancelDTO.Cancel">
            <summary>Actual ticket cancel being sent to Sportradar</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCancel.Sender.BookmakerId">
            <summary>Client's id (provided by Sportradar to the client)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.Reason">
            <summary>Object carrying information about cashout response</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.Reason.Code">
            <summary>Cashout response code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.Reason.Message">
            <summary>Cashout rejection reason description</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.Status">
            <summary>Cashout status - accepted, rejected</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.TicketCashoutResponseDTO">
            <summary>Ticket cashout response 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.TicketCashoutResponseDTO.Signature">
            <summary>Response signature</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.TicketCashoutResponseDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashoutResponse.Result.TicketId">
            <summary>Ticket id</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.Anonymous">
            <summary>
            Class Anonymous for BetCashout
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.Anonymous.Id">
            <summary>Bet id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.Anonymous.CashoutStake">
            <summary>Cashout stake in same currency as original ticket. Quantity multiplied by 10_000 and rounded to a long value.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.Anonymous.CashoutPercent">
            <summary>Cashout percent. Quantity multiplied by 10_000 and rounded to a long value. Percent of bet to cashout. Max 100%.</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO">
            <summary>Ticket cashout version 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.TimestampUtc">
            <summary>Timestamp of ticket cashout placement (in UNIX time millis)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.TicketId">
            <summary>Ticket id to cashout</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.Sender">
            <summary>Identification and settings of the cashout sender</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.CashoutStake">
            <summary>Cashout stake in same currency as original ticket. Quantity multiplied by 10_000 and rounded to a long value. Applicable only if performing full cashout.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.CashoutPercent">
            <summary>Cashout percent. Quantity multiplied by 10_000 and rounded to a long value. Percent of ticket to cashout. Max 100%.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.BetCashout">
            <summary>Array of (betId, cashoutStake) pairs, if performing partial cashout. Applicable only if ticket-level cashout stake is null.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.TicketCashoutDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketCashout.Sender.BookmakerId">
            <summary>Client's id (provided by Sportradar to the client)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.Reason">
            <summary>Object carrying information about settle response</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.Reason.Code">
            <summary>Settle response code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.Reason.Message">
            <summary>Settle rejection reason description</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.Status">
            <summary>Settle status - accepted, rejected</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.TicketNonSrSettleResponseDTO">
            <summary>Ticket non-Sportradar settle response v2 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.TicketNonSrSettleResponseDTO.Signature">
            <summary>Response signature</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.TicketNonSrSettleResponseDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettleResponse.Result.TicketId">
            <summary>Ticket id</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO">
            <summary>Non-Sportradar settle version 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO.TimestampUtc">
            <summary>Timestamp of non-Sportradar settle placement (in UNIX time millis)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO.TicketId">
            <summary>Ticket id to settle</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO.Sender">
            <summary>Identification and settings of the settle sender</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO.NonSrSettleStake">
            <summary>Non-Sportradar settle stake in same currency as original ticket. Quantity multiplied by 10_000 and rounded to a long value. Applicable only if performing full cashout.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.TicketNonSrSettleDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketNonSrSettle.Sender.BookmakerId">
            <summary>Client's id (provided by Sportradar to the client)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.TicketReofferCancelDTO">
            <summary>Re-offer cancel version 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.TicketReofferCancelDTO.TimestampUtc">
            <summary>Timestamp of re-offer cancel placement (in UNIX time millis)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.TicketReofferCancelDTO.TicketId">
            <summary>Re-offer ticket id to cancel (in the client's system)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.TicketReofferCancelDTO.Sender">
            <summary>Identification and settings of the re-offer cancel sender</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.TicketReofferCancelDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketReofferCancel.Sender.BookmakerId">
            <summary>Client's id (provided by Sportradar to the client)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Reason">
            <summary>Object carrying information about rejection cause</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Reason.Code">
            <summary>Rejection code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Reason.Message">
            <summary>Rejection reason description</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Status">
            <summary>Acceptance status - accepted, rejected</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO">
            <summary>Ticket response 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO.AutoAcceptedOdds">
            <summary>Contains odds auto-acceptance information</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO.Signature">
            <summary>Response signature (previous betAcceptanceId)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.TicketResponseDTO.ExchangeRate">
            <summary>The exchange rate used when converting currencies to EUR. Double multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Result.TicketId">
            <summary>External ticket id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Result.BetDetails">
            <summary>Bet-level rejection details</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous">
            <summary>Odds auto-acceptance selection information</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous.RequestedOdds">
            <summary>Odds with which the ticket was placed</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous.UsedOdds">
            <summary>Odds with which the ticket was accepted</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2">
            <summary>Reason on bet level</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2.BetId">
            <summary>Bet id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2.SelectionDetails">
            <summary>Per-selection rejection reasons</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2.Reoffer">
            <summary>Bet reoffer details, mutually exclusive with alternativeStake</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2.AlternativeStake">
            <summary>Alternative stake, mutually exclusive with reoffer</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous3">
            <summary>Reason on selection level</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous3.RejectionInfo">
            <summary>Rejection information on selection level</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Reoffer.Stake">
            <summary>Reoffer stake. Double multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Reoffer.Type">
            <summary>Reoffer type, if auto then stake will be present. If manual you should wait for reoffer stake over Reply channel</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.AlternativeStake.Stake">
            <summary>Alternative stake. Double multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.RejectionInfo.EventId">
            <summary>Rejected selection's related Betradar event (match or outright) id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.RejectionInfo.Id">
            <summary>Rejected selection's related Selection id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.RejectionInfo.Odds">
            <summary>Rejected selection's related Odds</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous">
            <summary>
            Class for BET
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.Bonus">
            <summary>Bonus of the bet (optional, default null)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.FreeStake">
            <summary>FreeStake Bonus of the bet (optional, default null)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.CustomBet">
            <summary>Flag if bet is a custom bet (optional, default false)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.CalculationOdds">
            <summary>Odds calculated for custom bet multiplied by 10_000 and rounded to int value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.Stake">
            <summary>Stake of the bet</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.EntireStake">
            <summary>Entire stake of the bet</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.Id">
            <summary>Bet id (optional)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.SelectedSystems">
            <summary>Array of all the systems (mandatory, [0] is not allowed, use [fold] instead)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.SelectionRefs">
            <summary>Array of selection references which form the bet (optional, if missing then all selections are used)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.ReofferRefId">
            <summary>Reoffer reference bet id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous.SumOfWins">
            <summary>Sum of all wins for all generated combinations for this bet (in ticket currency, used in validation)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2">
            <summary>
            Class for TicketSelection
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2.GetHashCode">
            <summary>
            Returns a hash code for this instance
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2.EventId">
            <summary>Betradar event (match or outright) id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2.Id">
            <summary>Selection id, should be composed according to specification</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2.Odds">
            <summary>Odds multiplied by 10_000 and rounded to int value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2.BoostedOdds">
            <summary>Boosted odds multiplied by 10_000 and rounded to int value</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous3">
            <summary>
            Class for Ticket SelectionRef
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <summary>Array of selection references to form the bet (optional, if missing all selections are taken)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous3.SelectionIndex">
            <summary>Selection index from 'ticket.selections' array (zero based)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous3.Banker">
            <summary>Flag if selection is banker (optional, default false)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.FreeStake.Value">
            <summary>Quantity multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.FreeStake.Type">
            <summary>Type (optional, default total)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.FreeStake.Description">
            <summary>Description of the FreeStake Type.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.FreeStake.PaidAs">
            <summary>Description of the FreeStake Payment Type.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Bonus.Value">
            <summary>Quantity multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Bonus.Type">
            <summary>Type (optional, default total)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Bonus.Mode">
            <summary>Payout mode (optional, default all). Relevant mostly for system bets. All: all bets must win for bonus to be paid out.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Bonus.Description">
            <summary>Description (optional, default accaBonus) of the Bonus Type.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Bonus.PaidAs">
            <summary>Description (optional, default cash) of the bonus payment type.</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.TicketDTO">
            <summary>Ticket version 2.4 schema</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.TicketDTO.Ticket">
            <summary>Actual ticket being sent to Sportradar</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EndCustomer.Ip">
            <summary>End user's ip</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EndCustomer.LanguageId">
            <summary>ISO 639-1 language code</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EndCustomer.DeviceId">
            <summary>End user's device id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EndCustomer.Id">
            <summary>End user's unique id (in client's system)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EndCustomer.Confidence">
            <summary>Suggested CCF of the customer multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EntireStake.Value">
            <summary>Quantity multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.EntireStake.Type">
            <summary>Type of stake (optional, default total)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.Currency">
            <summary>3 or 4 letter currency code (4 letters only apply to mBTC)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.TerminalId">
            <summary>Terminal id (optional)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.Channel">
            <summary>Communication channel</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.ShopId">
            <summary>Shop id (optional)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.BookmakerId">
            <summary>Client's id (provided by Sportradar to the client)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.EndCustomer">
            <summary>Identification of the end user (customer)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender.LimitId">
            <summary>Client's limit id (provided by Sportradar to the client)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Stake.Value">
            <summary>Quantity multiplied by 10_000 and rounded to a long value</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Stake.Type">
            <summary>Type of stake (optional, default total)</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket">
            <summary>
            Class Ticket
            </summary>
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket"/> class
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.#ctor(System.String,Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Sender,System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous},System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2},Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.TicketOddsChange,System.Boolean,System.DateTime,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int64})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="sender">The sender</param>
            <param name="bets">The bets</param>
            <param name="selections">The selections</param>
            <param name="oddsChange">The odds change</param>
            <param name="isTestSource">if set to <c>true</c> [is test source]</param>
            <param name="timestamp">The timestamp</param>
            <param name="version">The version</param>
            <param name="reofferRefId">The reoffer reference id</param>
            <param name="altStakeRefId">The alternative stake reference id</param>
            <param name="totalCombinations">Expected total number of generated combinations on this ticket (optional, default null). If present is used to validate against actual number of generated combinations</param>
            <param name="lastMatchEndTime">Time of last non-sportradar selection on ticket</param>
            <param name="payCap">Capped max payout of the ticket</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.#ctor(Sportradar.MTS.SDK.Entities.Interfaces.ITicket)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket"/> class
            </summary>
            <param name="ticket">The ticket</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.GetBetSelectionRefs(Sportradar.MTS.SDK.Entities.Interfaces.IBet,System.Collections.Generic.IReadOnlyList{Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2},System.Boolean)">
            <summary>
            Gets the bet selection refs
            </summary>
            <param name="bet">The bet</param>
            <param name="allSelections">All selections</param>
            <param name="hasBanker">There is a banker in any of the selection</param>
            <returns>IEnumerable&lt;ISelectionRef&gt;</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.FindSelectionIndex(System.Collections.Generic.IReadOnlyList{Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Anonymous2},Sportradar.MTS.SDK.Entities.Interfaces.ISelection)">
            <summary>
            Finds the index of the selection
            </summary>
            <param name="allSelections">All selections</param>
            <param name="specific">The specific</param>
            <returns>The index of the selection</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.TimestampUtc">
            <summary>Timestamp of ticket placement (in UNIX time millis)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.Bets">
            <summary>Collection of all bets</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.TicketId">
            <summary>Unique ticket id (in the client's system)</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.Selections">
            <summary>Array of all selections. Order is very important as they can be referenced by index in 'ticket.bets.selectionRefs'</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.Sender">
            <summary>Identification and settings of the ticket sender</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.ReofferRefId">
            <summary>Reoffer reference ticket id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.AltStakeRefId">
            <summary>Alternative stake reference ticket id</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.Version">
            <summary>JSON format version (must be '2.4')</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.OddsChange">
            <summary>Accept change in odds (optional, default none) none: default behaviour, any: any odds change accepted, higher: accept higher odds</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.TotalCombinations">
            <summary>Expected total number of generated combinations on this ticket (optional, default null). If present is used to validate against actual number of generated combinations.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.LastMatchEndTime">
            <summary>End time of last (non Sportradar) match on ticket.</summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Dto.Ticket.Ticket.PayCap">
            <summary>Maximum payment win for ticket (capped).</summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup">
            <summary>
            Enumerates groups of resources represented by the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/>
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup.Match">
            <summary>
            The resource represents a sport event of match type
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup.Race">
            <summary>
            The resource represents a sport event of race type
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup.Tournament">
            <summary>
            The resource represents a tournament
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup.Other">
            <summary>
            The non-specific URN type specifier
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN">
            <summary>
            Represents a Uniform Resource Name
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.RegexPattern">
            <summary>
            A regex pattern used for parsing of URN strings
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.PrefixGroupName">
            <summary>
            The name of the regex group used to store the prefix
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.TypeGroupName">
            <summary>
            The name of the regex group used to store the type
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.IdGroupName">
            <summary>
            The name of the regex group used to store the id
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Types">
            <summary>
            Defines supported resource types
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Prefix">
            <summary>
            Gets the prefix of the current instance
            </summary>
            <value>The prefix</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Type">
            <summary>
            Gets a string specifying the type of the resource associated with the current instance
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.TypeGroup">
            <summary>
            Gets a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup"/> enum member describing the group of the resource
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.ResourceTypeGroup"/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Id">
            <summary>
            Gets the numerical part of the identifier associated with the current instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.#ctor(System.String,System.String,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> class
            </summary>
            <param name="prefix">The prefix of the URN</param>
            <param name="type">The type of the resource associated with the URN</param>
            <param name="id">The numerical identifier of the resource associated with the URN</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Parse(System.String)">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> instance by parsing the provided string
            </summary>
            <param name="urnString">The string representation of the URN</param>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> constructed by parsing the provided string representation</returns>
            <exception cref="T:System.FormatException">The format of the provided representation is not correct</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.TryParse(System.String,Sportradar.MTS.SDK.Entities.Internal.Enums.URN@)">
            <summary>
            Tries to construct a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> instance by parsing the provided string
            </summary>
            <param name="urnString">The string representation of the URN</param>
            <param name="urn">When the method returns it contains the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> constructed by parsing the provided string if the parsing was successful, otherwise null</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance
            </summary>
            <returns>A <see cref="T:System.String" /> that represents this instance</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance
            </summary>
            <param name="obj">The object to compare with the current object</param>
            <returns><c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.Enums.URN.GetHashCode">
            <summary>
            Returns a hash code for this instance
            </summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.ICalculateProbabilityProvider">
            <summary>
            Defines a contract implemented by classes used to provide data probability calculations
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.ICalculateProbabilityProvider.GetDataAsync(System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.CustomBet.ISelection})">
            <summary>
            Asynchronously gets a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO"/> instance
            </summary>
            <param name="selections">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing selections for which the probability should be fetched</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the probability calculation</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1">
            <summary>
            Defines a contract implemented by classes used to provide data specified by it's id
            </summary>
            <typeparam name="T">Specifies the type of data returned by this <see cref="T:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1"/></typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.GetDataAsync(System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.GetDataAsync(System.String,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.GetDataAsync(System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.GetDataAsync(System.String,System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="authorization">The value of authorization header</param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.PostDataAsync(System.Net.Http.HttpContent,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.PostDataAsync(System.String,System.Net.Http.HttpContent,System.String)">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance in language specified by the provided <code>languageCode</code>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="authorization">The value of authorization header</param>
            <param name="languageCode">A two letter language code of the <see cref="T:System.Globalization.CultureInfo"/></param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.PostDataAsync(System.Net.Http.HttpContent,System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IDataProvider`1.PostDataAsync(System.String,System.Net.Http.HttpContent,System.String[])">
            <summary>
            Asynchronously gets a <see cref="T:System.Threading.Tasks.Task`1"/> instance specified by the provided identifiersA two letter language code of the <see cref="T:System.Globalization.CultureInfo"/>
            </summary>
            <param name="content">A <see cref="T:System.Net.Http.HttpContent"/> to be posted to the specific <see cref="T:System.Uri"/></param>
            <param name="authorization">The value of authorization header</param>
            <param name="identifiers">A list of identifiers uniquely specifying the instance to fetch</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> representing the async operation</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.CommunicationException">Failed to execute http get</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.DeserializationException">The deserialization failed</exception>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The deserialized entity could not be mapped to entity used by the SDK</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.IRoutingKeyParser">
            <summary>
            Defines a contract implemented by classes used to parse the RabbitMq routing key in order to
            determine the sportId of the sport associated with the message
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IRoutingKeyParser.GetTicketId(System.String,System.String)">
            <summary>
            Gets a string representing the ticketId by parsing the provided <code>routingKey</code>
            </summary>
            <param name="routingKey">The routing key specified by the feed</param>
            <param name="messageTypeName">The type name of the received message</param>
            <returns>The sportId obtained by parsing the provided <code>routingKey</code></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.IRoutingKeyParser.TryGetTicketId(System.String,System.String,System.String@)">
            <summary>
            Tries to get a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Enums.URN"/> representing of the sportId by parsing the provided <code>routingKey</code>
            </summary>
            <param name="routingKey">The routing key specified by the feed</param>
            <param name="messageTypeName">The type name of the received message</param>
            <param name="ticketId">If the method returned true the ticketId; Otherwise undefined</param>
            <returns>True if ticketId could be retrieved from <code>routingKey</code>; Otherwise false</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationInternal">
            <summary>
            Defines a contract implemented by classes representing odds feed configuration / settings
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationInternal.ApiHost">
            <summary>
            Gets the URL of the feed's REST interface
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection">
            <summary>
            Defines a contract for classes implementing sdk configuration section in the app.config
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Username">
            <summary>
            Gets the username used to connect to MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Password">
            <summary>
            Gets the password used to connect to MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Host">
            <summary>
            Gets the hostname of the broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Port">
            <summary>
            Gets the port number used to connect to the broker
            </summary>
            <remarks>Port should be chosen through the useSsl property. Manually setting port number should be used only when non-default port is required</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.VirtualHost">
            <summary>
            Gets the virtual host name
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.NodeId">
            <summary>
            Gets the node id for this instance of sdk
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.UseSsl">
            <summary>
            Gets a value specifying whether the connection to AMQP broker should use SSL encryption
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.SslServerName">
            <summary>
            Gets the server name that will be used to check against SSL certificate
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.BookmakerId">
            <summary>
            Gets the default sender bookmakerId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.LimitId">
            <summary>
            Gets the default sender limitId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Currency">
            <summary>
            Gets the default sender currency sign (3 or 4 letter)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.Channel">
            <summary>
            Gets the default sender channel (see <see cref="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel"/> for possible values)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.AccessToken">
            <summary>
            Gets the access token for the UF feed (only necessary if UF selections will be build)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.UfEnvironment">
            <summary>
            Gets the uf environment for the UF feed (only necessary if UF selections will be build)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.ProvideAdditionalMarketSpecifiers">
            <summary>
            This value is used to indicate if the sdk should add market specifiers for specific markets. Only used when building selection using UnifiedOdds ids. (default: true)
            </summary>
            <remarks>If this is set to true and the user uses UOF markets, when there are special cases (market 215, or $score in SOV/SBV template), sdk automatically tries to add appropriate specifier; if set to false, user will need to add this manually</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.StatisticsEnabled">
            <summary>
            Is statistics collecting enabled
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.StatisticsTimeout">
            <summary>
            Gets the timeout for automatically collecting statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.StatisticsRecordLimit">
            <summary>
            Gets the limit of records for automatically writing statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.SdkLogConfigPath">
            <summary>
            Gets the file path to the configuration file for the log4net repository used by the SDK
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.ExclusiveConsumer">
            <summary>
            Should the rabbit consumer channel be exclusive
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.KeycloakHost">
            <summary>
            Gets the Keycloak host for authorization
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.KeycloakUsername">
            <summary>
            Gets the username used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.KeycloakPassword">
            <summary>
            Gets the password used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.KeycloakSecret">
            <summary>
            Gets the secret used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.MtsClientApiHost">
            <summary>
            Gets the Client API host
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.TicketResponseTimeoutLive">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "live" selectionId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.TicketResponseTimeoutPrematch">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "live" selectionId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.TicketCancellationResponseTimeout">
            <summary>
            Gets the ticket cancellation response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.TicketCashoutResponseTimeout">
            <summary>
            Gets the ticket cashout response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection.TicketNonSrSettleResponseTimeout">
            <summary>
            Gets the ticket non-sportradar settle response timeout(ms)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.JsonDeserializer`1">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Common.Internal.IDeserializer`1" /> implementation for json responses
            </summary>
            <typeparam name="T">Specifies the type that can be deserialized</typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.JsonDeserializer`1.Deserialize(System.IO.Stream)">
            <summary>
            Deserialize the provided<see cref="T:System.Byte"/> array
            </summary>
            <param name="stream">A <see cref="T:System.IO.Stream"/> instance containing data to be deserialized </param>
            <returns>The <code>data</code> deserialized to <typeparamref name="T" /> instance</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.JsonDeserializer`1.Deserialize``1(System.IO.Stream)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte" /> array to a <typeparamref name="T1" /> instance
            </summary>
            <typeparam name="T1">A <typeparamref name="T" /> derived type specifying the target of deserialization</typeparam>
            <param name="stream">A <see cref="T:System.IO.Stream" /> instance containing data to be deserialized</param>
            <returns>The <code>data</code> deserialized to <typeparamref name="T1" /> instance</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.JsonDeserializer`1.Deserialize``1(System.String)">
            <summary>
            Deserialize the provided <see cref="T:System.Byte" /> array to a <typeparamref name="T1" /> instance
            </summary>
            <typeparam name="T1">A <typeparamref name="T" /> derived type specifying the target of deserialization</typeparam>
            <param name="input">A <see cref="T:System.String" /> containing data to be deserialized</param>
            <returns>The <code>data</code> deserialized to <typeparamref name="T1" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest">
            <summary>
            Defines which messages will be provided by feed
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.MessageInterest.TicketSubmit">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket submit messages
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket submit messages</returns>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.MessageInterest.TicketCancel">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket cancel messages
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket cancel messages</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute">
            <summary>
            Attributes providing additional information to deserializers. This is only required to overcome problems
            caused by XSD schema issues and will be removed when the schemes are fixed
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute.IgnoreNamespace">
            <summary>
            Gets or sets a value indicating whether the xml namespace should be ignored when deserializing the xml message
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute.DocumentNamespace">
            <summary>
            Gets or sets the document namespace
            </summary>
            <value>The document namespace</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute.RootElementName">
            <summary>
            Gets or sets the name of the root xml element in the associated xml messages
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.OverrideXmlNamespaceAttribute"/> class
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapper">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType" /> instances to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO" /> instances
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType"/> containing sport event data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapper"/> class.
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType"/> containing available selections</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapper.Map">
            <summary>
            Maps it's data to instance of <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO" />
            </summary>
            <returns>The created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapperFactory">
            <summary>
            A factory used to create <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/> instances used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType"/> instances to
            <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO"/> instances
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType)">
            <summary>
            Creates and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType"/> instances to
            <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.AvailableSelectionsDTO"/> instances
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType" /> instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> will map</param>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapper">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType" /> instances to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO" /> instances
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" />
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType"/> containing sport event data
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapper"/> class.
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType"/> containing available selections</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapper.Map">
            <summary>
            Maps it's data to instance of <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO" />
            </summary>
            <returns>The created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapperFactory">
            <summary>
            A factory used to create <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/> instances used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType"/> instances to
            <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO"/> instances
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2" />
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType)">
            <summary>
            Creates and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance used to map <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType"/> instances to
            <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.CustomBet.CalculationDTO"/> instances
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType" /> instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> will map</param>
            <returns>The constructed <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance</returns>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.CcfImpl"/> instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper"/> class
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.CcfImpl"/> instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper.Sportradar#MTS#SDK#Entities#Internal#REST#ISingleTypeMapper{Sportradar#MTS#SDK#Entities#Internal#REST#ClientApiImpl#CcfImpl}#Map">
            <summary>
            Maps it's data to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.CcfImpl"/> instance
            </summary>
            <returns>The created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.CcfImpl"/> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapperFactory">
            <summary>
            Class CcfMapperFactory
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO)">
            <summary>
            Creates and returns an instance of Mapper for mapping <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.CcfResponseDTO"/>
            </summary>
            <param name="data">A input instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper"/> will map</param>
            <returns>New <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.CcfMapper" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.CcfImpl">
            <summary>
            A data-transfer-object for customer confidence factor
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.KeycloakAuthorization">
            <summary>
            A data-transfer-object for Keycloak authorization
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.MaxStakeImpl">
            <summary>
            A data-transfer-object for max stake
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.SportCcf">
            <summary>
            A data-transfer-object for customer confidence factor per sport
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketAttributeDTO">
            <summary>
            A data-transfer-object representing a market description attributes
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketAttributeDTO.Name">
            <summary>
            Gets the attribute name
            </summary>
            <value>The name</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketAttributeDTO.Description">
            <summary>
            Gets the attribute description
            </summary>
            <value>The description</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketAttributeDTO.#ctor(Sportradar.MTS.SDK.Entities.Internal.REST.attributesAttribute)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketAttributeDTO"/> class
            </summary>
            <param name="record">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.attributesAttribute"/> representing attribute object obtained by parsing the xml</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketDescriptionDTO">
            <summary>
            A data transfer object for market description
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketMappingDTO">
            <summary>
            A data-transfer-object representing a market mapping
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketSpecifierDTO">
            <summary>
            A data-transfer-object representation for specifier
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketSpecifierDTO.#ctor(Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.MarketSpecifierDTO"/> class
            </summary>
            <param name="specifier">The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier"/> used for creating instance</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.OutcomeDescriptionDTO">
            <summary>
            A data-transfer-object for outcome description
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.Dto.OutcomeMappingDTO">
            <summary>
            A data-transfer-object representing a market mapping for outcome
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1">
            <summary>
            Defines a contract implemented by classes capable of map data to instance of type specified by out parameter
            </summary>
            <typeparam name="T">Specifies the target type of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/></typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1.Map">
            <summary>
            Maps it's data to instance of <typeparamref name="T"/>
            </summary>
            <returns>The created <typeparamref name="T"/> instance</returns>
            <exception cref="T:Sportradar.MTS.SDK.Common.Exceptions.MappingException">The mapping of the entity failed</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2">
            <summary>
            Defines a contract implemented by classes used to provide mappers used to map instances of one
            type to instances of another type
            </summary>
            <typeparam name="TIn">Specifies the type of data with which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/> instances work with</typeparam>
            <typeparam name="TOut">Specifies the type returned by created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/> instances </typeparam>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapperFactory`2.CreateMapper(`0)">
            <summary>
            Creates and returns a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance
            </summary>
            <param name="data">A input instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1"/> will map</param>
            <returns>New <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ISingleTypeMapper`1" /> instance</returns>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.AccessTokenDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.KeycloakAuthorization"/> instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.AccessTokenDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper"/> class
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.AccessTokenDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.KeycloakAuthorization"/> instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper.Sportradar#MTS#SDK#Entities#Internal#REST#ISingleTypeMapper{Sportradar#MTS#SDK#Entities#Internal#REST#ClientApiImpl#KeycloakAuthorization}#Map">
            <summary>
            Maps it's data to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.KeycloakAuthorization"/> instance
            </summary>
            <returns>The created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.KeycloakAuthorization"/> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapperFactory">
            <summary>
            Class KeycloakAuthorizationMapperFactory
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.AccessTokenDTO)">
            <summary>
            Creates and returns an instance of Mapper for mapping <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.AccessTokenDTO"/>
            </summary>
            <param name="data">A input instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper"/> will map</param>
            <returns>New <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.KeycloakAuthorizationMapper" /> instance</returns>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper._data">
            <summary>
            A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.MaxStakeImpl"/> instance
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper"/> class
            </summary>
            <param name="data">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO"/> instance containing data used to construct <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.MaxStakeImpl"/> instance</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper.Sportradar#MTS#SDK#Entities#Internal#REST#ISingleTypeMapper{Sportradar#MTS#SDK#Entities#Internal#REST#ClientApiImpl#MaxStakeImpl}#Map">
            <summary>
            Maps it's data to <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.MaxStakeImpl"/> instance
            </summary>
            <returns>The created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.ClientApiImpl.MaxStakeImpl"/> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapperFactory">
            <summary>
            Class MarketDescriptionsMapperFactory
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapperFactory.CreateMapper(Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO)">
            <summary>
            Creates and returns an instance of Mapper for mapping <see cref="T:Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi.MaxStakeResponseDTO"/>
            </summary>
            <param name="data">A input instance which the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper"/> will map</param>
            <returns>New <see cref="T:Sportradar.MTS.SDK.Entities.Internal.REST.MaxStakeMapper" /> instance</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange">
            <summary>
            Class CcfChange.
            Implements the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange" />
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ICcfChange" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.Timestamp">
            <summary>
            Gets the timestamp of the ccf value change
            </summary>
            <value>The timestamp of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.BookmakerId">
            <summary>
            Gets the bookmaker id of the ccf value change
            </summary>
            <value>The bookmaker id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.SubBookmakerId">
            <summary>
            Gets the sub bookmaker id of the ccf value change
            </summary>
            <value>The sub bookmaker id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.SourceId">
            <summary>
            Gets the source id of the ccf value change
            </summary>
            <value>The source id of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.SourceType">
            <summary>
            Gets the source type customer of the ccf value change
            </summary>
            <value>The source type customer of the ccf value change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.Ccf">
            <summary>
            Gets the customer confidence factor for the customer
            </summary>
            <value>The customer confidence factor for the customer</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.PreviousCcf">
            <summary>
            Gets the previous customer confidence factor for the customer
            </summary>
            <value>The previous customer confidence factor for the customer</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.SportId">
            <summary>
            Gets the sport id
            </summary>
            <value>The sport id</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.SportName">
            <summary>
            Gets the name of the sport
            </summary>
            <value>The name of the sport</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.IsLive">
            <summary>
            Gets a value indicating whether the change was for live only
            </summary>
            <value><c>null</c> if [is live] contains no value, <c>true</c> if [is live]; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.REST.ReportApiImpl.CcfChange.ToString">
            <summary>Returns a string that represents the current object.</summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.RestMessage">
            <summary>
            Represents all messages (entities) received from the REST API
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.XmlRestMessage">
            <summary>
            Represents all XML messages (entities) received from the REST API 
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions.market">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions.response_code">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions.response_codeSpecified">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.market_descriptions.location">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType.event">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.AvailableSelectionsType.generated_at">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType.calculation">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType.available_selections">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResponseType.generated_at">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionsType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionsType.selection">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.outcomes">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.specifiers">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.mappings">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.attributes">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.name">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.groups">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.description">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.includes_outcomes_of_type">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_market.variant">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.desc_outcomesOutcome">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_outcomesOutcome.id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_outcomesOutcome.name">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_outcomesOutcome.description">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier.name">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier.type">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.desc_specifiersSpecifier.description">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.mapping_outcome">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.product_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.sport_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.market_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.sov_template">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMapping.valid_for">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMappingMapping_outcome">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMappingMapping_outcome.outcome_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMappingMapping_outcome.product_outcome_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.mappingsMappingMapping_outcome.product_outcome_name">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.attributesAttribute">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.attributesAttribute.name">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.attributesAttribute.description">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.response_code">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.OK">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.CREATED">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.ACCEPTED">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.FORBIDDEN">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.NOT_FOUND">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.CONFLICT">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.SERVICE_UNAVAILABLE">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.NOT_IMPLEMENTED">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.MOVED_PERMANENTLY">
            <remarks/>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.REST.response_code.BAD_REQUEST">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.EventType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.EventType.markets">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.EventType.id">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.MarketType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.MarketType.outcome">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.MarketType.id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.MarketType.specifiers">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.OutcomeType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.OutcomeType.id">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResultType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResultType.odds">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.CalculationResultType.probability">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.ResponseType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ResponseType.message">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ResponseType.errors">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ResponseType.response_code">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.ResponseType.generated_at">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionType">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionType.id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionType.market_id">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionType.specifiers">
            <remarks/>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.REST.SelectionType.outcome_id">
            <remarks/>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration">
            <summary>
            Represents SDK configuration
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Username">
            <summary>
            Gets an username used when establishing connection to the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Password">
            <summary>
            Gets a password used when establishing connection to the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Host">
            <summary>
            Gets a value specifying the host name of the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Port">
            <summary>
            Gets the port number used to connect to the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.VirtualHost">
            <summary>
            Gets a value specifying the virtual host name of the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.UseSsl">
            <summary>
            Gets a value specifying whether the connection to AMQP broker should use SSL encryption
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.SslServerName">
            <summary>
            Gets the server name that will be used to check against SSL certificate
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.NodeId">
            <summary>
            Gets a node id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.BookmakerId">
            <summary>
            Gets the BookmakerId associated with the current configuration or 0 if none is provided
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.LimitId">
            <summary>
            Gets the channel identifier associated with the current configuration or 0 if none is provided
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Currency">
            <summary>
            Gets the default currency associated with the current configuration or a null reference if none is provided.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.Channel">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel" /> specifying the associated channel or a null reference if none is specified.
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.StatisticsEnabled">
            <summary>
            Gets a value indication whether statistics collection is enabled
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.StatisticsTimeout">
            <summary>
            Gets the timeout for automatically collecting statistics (in sec)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.StatisticsRecordLimit">
            <summary>
            Gets the limit of records for automatically writing statistics (in number of records)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.AccessToken">
            <summary>
            Gets the access token for the UF feed (only necessary if UF selections will be build)
            </summary>
            <value>The access token</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.UfEnvironment">
            <summary>
            Gets the UF environment for the UF feed (only necessary if UF selections will be build)
            </summary>
            <value>The UF environment</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.ProvideAdditionalMarketSpecifiers">
            <summary>
            Gets a value indicating whether additional market specifiers should be added
            </summary>
            <value><c>true</c> if [provide additional market specifiers]; otherwise, <c>false</c></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.ExclusiveConsumer">
            <summary>
            Should the rabbit consumer channel be exclusive
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.KeycloakHost">
            <summary>
            Gets the Keycloak host for authorization
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.KeycloakUsername">
            <summary>
            Gets the username used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.KeycloakPassword">
            <summary>
            Gets the password used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.KeycloakSecret">
            <summary>
            Gets the secret used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.MtsClientApiHost">
            <summary>
            Gets the Client API host
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.TicketResponseTimeoutLive">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "live" selectionId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.TicketResponseTimeoutPrematch">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "prematch" selectionId
            </summary>
            <value>Gets the ticket response timeout(ms) for tickets using "prematch" selectionId</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.TicketCancellationResponseTimeout">
            <summary>
            Gets the ticket cancellation response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.TicketCashoutResponseTimeout">
            <summary>
            Gets the ticket cashout response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.TicketNonSrSettleResponseTimeout">
            <summary>
            Gets the ticket non-sportradar settle response timeout(ms)
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.#ctor(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Int32,System.Int32,System.Int32,System.String,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.SenderChannel},System.String,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.UfEnvironment},System.Boolean,System.Int32,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration"/> class
            </summary>
            <param name="username">The username used when connecting to AMQP broker</param>
            <param name="password">The password used when connecting to AMQP broker</param>
            <param name="host">The host name of the AMQP broker</param>
            <param name="vhost">The virtual host defined on the AMQP broker</param>
            <param name="useSsl">Value indicating whether SSL should be used when connecting to AMQP</param>
            <param name="sslServerName">The server name that will be used to check against SSL certificate</param>
            <param name="nodeId"> The value uniquely identifying the SDK instance associated with the current configuration</param>
            <param name="bookmakerId">The bookmaker id assigned to the customer by the MTS CI</param>
            <param name="limitId">The value specifying the limits of the placed tickets</param>
            <param name="currency">The currency of the placed tickets or a null reference</param>
            <param name="channel">The <see cref="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel"/> specifying the origin of the tickets or a null reference</param>
            <param name="accessToken">The access token for the UF feed (only necessary if UF selections will be build)</param>
            <param name="ufEnvironment">The UF environment for the UF feed (only necessary if UF selections will be build)</param>
            <param name="provideAdditionalMarketSpecifiers">The value indicating if the additional market specifiers should be provided</param>
            <param name="port">The port number used to connect to the AMQP broker</param>
            <param name="exclusiveConsumer">Should the consumer channel be exclusive</param>
            <param name="keycloakHost">The Keycloak host for authorization</param>
            <param name="keycloakUsername">The username used to connect authenticate to Keycloak</param>
            <param name="keycloakPassword">The password used to connect authenticate to Keycloak</param>
            <param name="keycloakSecret">The secret used to connect authenticate to Keycloak</param>
            <param name="mtsClientApiHost">The Client API host</param>
            <param name="ticketResponseTimeoutLive">The ticket response timeout(ms) for tickets using "live" selectionId</param>
            <param name="ticketResponseTimeoutPrematch">The ticket response timeout(ms) for tickets using "prematch" selectionId</param>
            <param name="ticketCancellationResponseTimeout">The ticket cancellation response timeout(ms)</param>
            <param name="ticketCashoutResponseTimeout">The ticket cashout response timeout(ms)</param>
            <param name="ticketNonSrSettleResponseTimeout">The ticket cashout response timeout(ms)</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.#ctor(Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration"/> class
            </summary>
            <param name="section">A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> instance containing config values</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration.ObjectInvariant">
            <summary>
            Defined field invariants needed by code contracts
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationInternal">
            <summary>
            Represents SDK configuration
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationInternal.ApiHost">
            <summary>
            Gets the URL of the feed's REST interface
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationInternal.#ctor(Sportradar.MTS.SDK.Entities.ISdkConfiguration,Sportradar.MTS.SDK.Common.Internal.Rest.IDataFetcher)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfiguration"/> class
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection">
            <summary>
            Represents the SDK settings read from app.config file
            </summary>
        </member>
        <member name="F:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.SectionName">
            <summary>
            The name of the section element in the app.config file
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Username">
            <summary>
            Gets the username used to connect to MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Password">
            <summary>
            Gets the password used to connect to MTS
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Host">
            <summary>
            Gets the hostname of the broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Port">
            <summary>
            Gets the port number used to connect to the broker
            </summary>
            <remarks>Port should be chosen through the useSsl property. Manually setting port number should be used only when non-default port is required</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.VirtualHost">
            <summary>
            Gets the virtual host name
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.NodeId">
            <summary>
            Gets the node id for this instance of sdk
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.UseSsl">
            <summary>
            Gets a value specifying whether the connection to AMQP broker should use SSL encryption
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.SslServerName">
            <summary>
            Gets the server name that will be used to check against SSL certificate
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.BookmakerId">
            <summary>
            Gets the default sender bookmakerId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.LimitId">
            <summary>
            Gets the default sender limitId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Currency">
            <summary>
            Gets the default sender currency sign (3 or 4 letter)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.Channel">
            <summary>
            Gets the default sender channel (see <see cref="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel"/> for possible values)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.AccessToken">
            <summary>
            Gets the access token for the UF feed (only necessary if UF selections will be build)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.UfEnvironment">
            <summary>
            Gets the uf environment for the UF feed (only necessary if UF selections will be build)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.ProvideAdditionalMarketSpecifiers">
            <summary>
            This value is used to indicate if the sdk should add market specifiers for specific markets. Only used when building selection using UnifiedOdds ids. (default: true)
            </summary>
            <remarks>If this is set to true and the user uses UOF markets, when there are special cases (market 215, or $score in SOV/SBV template), sdk automatically tries to add appropriate specifier; if set to false, user will need to add this manually</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.ExclusiveConsumer">
            <summary>
            Should the rabbit consumer channel be exclusive
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.StatisticsEnabled">
            <summary>
            Is statistics collecting enabled
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.StatisticsTimeout">
            <summary>
            Gets the timeout for automatically collecting statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.StatisticsRecordLimit">
            <summary>
            Gets the limit of records for automatically writing statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.KeycloakHost">
            <summary>
            Gets the Keycloak host for authorization
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.KeycloakUsername">
            <summary>
            Gets the username used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.KeycloakPassword">
            <summary>
            Gets the password used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.KeycloakSecret">
            <summary>
            Gets the secret used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.MtsClientApiHost">
            <summary>
            Gets the Client API host
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TicketResponseTimeoutLive">
            <summary>
            Gets the ticket response timeout (ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TicketResponseTimeoutPrematch">
            <summary>
            Gets the ticket response timeout (ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TicketCancellationResponseTimeout">
            <summary>
            Gets the ticket cancellation response timeout (ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TicketCashoutResponseTimeout">
            <summary>
            Gets the ticket cashout response timeout (ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TicketNonSrSettleResponseTimeout">
            <summary>
            Gets the non-sr ticket settlement response timeout (ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.SdkLogConfigPath">
            <summary>
            Gets the file path to the configuration file for the log4net repository used by the SDK
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.TryGetSection(Sportradar.MTS.SDK.Entities.Internal.ISdkConfigurationSection@)">
            <summary>
            Attempts to construct the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> from the app.config file
            </summary>
            <param name="section">When the call returns in points to the created <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/></param>
            <returns>True if the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> was successfully constructed; False otherwise</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection.GetSection">
            <summary>
            Retrieves the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> from the app.config file
            </summary>
            <returns>The <see cref="T:Sportradar.MTS.SDK.Entities.Internal.SdkConfigurationSection"/> instance loaded from config file</returns>
            <exception cref="T:System.InvalidOperationException">The configuration could not be loaded or the configuration does not contain the requested section</exception>
            <exception cref="T:System.Configuration.ConfigurationErrorsException">The section in the configuration file is not valid</exception>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder">
            <summary>
            Defines builder for routing keys and checks for feed sessions combo validation
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder.GenerateKeys(System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Internal.MessageInterest})">
            <summary>
            Validates input list of message interests and returns list of routing keys combination per interest
            </summary>
            <param name="interests"></param>
            <returns></returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder.GetStandardKeys">
            <summary>
            Gets the standard keys usually added to all sessions
            </summary>
            <returns>IEnumerable&lt;System.String&gt;</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder.GetSystemKeys">
            <summary>
            Gets the system keys added to system session
            </summary>
            <returns>IEnumerable&lt;System.String&gt;</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder.TicketSubmitMessages(System.Int32)">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket submit messages
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket submit messages</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.SdkRoutingKeyBuilder.TicketCancelMessages(System.Int32)">
            <summary>
            Constructs a <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket cancel messages
            </summary>
            <returns>A <see cref="T:Sportradar.MTS.SDK.Entities.Internal.MessageInterest"/> indicating an interest in ticket cancel messages</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketHelper.DateTimeToUnixTime(System.DateTime)">
            <summary>
            DateTime in UNIX time milliseconds (epoch time)
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketHelper.UnixTimeToDateTime(System.Int64)">
            <summary>
            Convert Unix time to DateTime (from epoch time)
            </summary>
            <param name="unixTime">The Unix time</param>
            <returns>DateTime.</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketHelper.ParseUnparsableMsg(System.Byte[])">
            <summary>
            Try to parse the unparsable MSG
            </summary>
            <param name="rawData">The raw data.</param>
            <returns>System.String.</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AlternativeStake">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AlternativeStake.Stake">
            <summary>
            Gets the stake
            </summary>
            <value>The stake</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AlternativeStake.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AlternativeStake"/> class
            </summary>
            <param name="stake">The stake</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AutoAcceptedOdds">
            <summary>
            Class AutoAcceptedOdds
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAutoAcceptedOdds" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AutoAcceptedOdds.SelectionIndex">
            <summary>
            Selection index from 'ticket.selections' array (zero based)
            </summary>
            <returns>Selection index from 'ticket.selections' array (zero based)</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AutoAcceptedOdds.RequestedOdds">
            <summary>
            Odds with which the ticket was placed
            </summary>
            <returns>Odds with which the ticket was placed</returns>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.AutoAcceptedOdds.UsedOdds">
            <summary>
            Odds with which the ticket was accepted
            </summary>
            <returns>Odds with which the ticket was accepted</returns>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBet" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.Bonus">
            <summary>
            Gets the bonus of the bet (optional, default null)
            </summary>
            <value>The bonus</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.FreeStake">
            <summary>
            Gets the free stkae of the bet (optional, default null)
            </summary>
            <value>The free stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.Stake">
            <summary>
            Gets the stake of the bet
            </summary>
            <value>The stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.EntireStake">
            <summary>
            Gets the entire stake of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.Id">
            <summary>
            Gets the id of the bet
            </summary>
            <value>The identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.SelectedSystems">
            <summary>
            Gets array of all the systems (optional, if missing then complete accumulator is used)
            </summary>
            <value>The selected systems</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.Selections">
            <summary>
            Gets the array of selection references which form the bet (optional, if missing then all selections are used)
            </summary>
            <value>The selection refs</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.ReofferRefId">
            <summary>
            Gets the reoffer reference bet id
            </summary>
            <value>The reoffer reference identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.SumOfWins">
            <summary>
            Gets the sum of all wins for all generated combinations for this bet (in ticket currency, used in validation)
            </summary>
            <value>The sum of wins</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.CustomBet">
            <summary>
            Gets the flag if bet is a custom bet (optional, default false)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.CalculationOdds">
            <summary>
            Gets the odds calculated for custom bet multiplied by 10_000 and rounded to int value
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet.#ctor(Sportradar.MTS.SDK.Entities.Interfaces.IBetBonus,Sportradar.MTS.SDK.Entities.Interfaces.IStake,Sportradar.MTS.SDK.Entities.Interfaces.IFreeStake,Sportradar.MTS.SDK.Entities.Interfaces.IStake,System.String,System.Collections.Generic.IEnumerable{System.Int32},System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.ISelection},System.String,System.Int64,System.Nullable{System.Boolean},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Bet"/> class
            </summary>
            <param name="bonus">The bonus</param>
            <param name="stake">The stake</param>
            <param name="freeStake">The free stake</param>
            <param name="entireStake">The entire stake</param>
            <param name="id">The bet identifier</param>
            <param name="selectedSystems">The selected systems</param>
            <param name="selections">The selections</param>
            <param name="reofferRefId">The reoffer reference identifier</param>
            <param name="sumOfWins">The sum of wins</param>
            <param name="customBet">The flag if bet is a custom bet</param>
            <param name="calculationOdds">The odds calculated for custom bet</param>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCancel.BetId">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCancel.CancelPercent">
            <summary>
            Gets the cancel percent of the assigned bet
            </summary>
            <value>The cancel percent</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCancel.#ctor(System.String,System.Nullable{System.Int32})">
            <summary>
            Construct the bet cashout
            </summary>
            <param name="betId">The bet id</param>
            <param name="cancelPercent">The cashout percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a int value)</param>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCashout.BetId">
            <summary>
            Gets the id of the bet
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCashout.CashoutStake">
            <summary>
            Gets the cashout stake of the assigned bet
            </summary>
            <value>The cashout stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCashout.CashoutPercent">
            <summary>
            Gets the cashout percent of the assigned bet
            </summary>
            <value>The cashout percent</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetCashout.#ctor(System.String,System.Int64,System.Nullable{System.Int32})">
            <summary>
            Construct the bet cashout
            </summary>
            <param name="betId">The bet id</param>
            <param name="cashoutStake">The cashout stake value of the assigned bet (quantity multiplied by 10_000 and rounded to a long value)</param>
            <param name="cashoutPercent">The cashout percent value of the assigned bet (quantity multiplied by 10_000 and rounded to a long value)</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetDetail" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.BetId">
            <summary>
            Gets the id of the bet
            </summary>
            <value>The bet identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.Reason">
            <summary>
            Gets the bet response reason
            </summary>
            <value>The reason</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.Reoffer">
            <summary>
            Gets the bet reoffer details (mutually exclusive with <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake" />)
            </summary>
            <value>The reoffer</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.AlternativeStake">
            <summary>
            Gets the alternative stake, mutually exclusive with <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer" />
            </summary>
            <value>The alternative stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.SelectionDetails">
            <summary>
            Gets the array of selection details
            </summary>
            <value>The selection details</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.#ctor(System.String,Sportradar.MTS.SDK.Entities.Interfaces.IResponseReason,Sportradar.MTS.SDK.Entities.Interfaces.IAlternativeStake,Sportradar.MTS.SDK.Entities.Interfaces.IBetReoffer,System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.ISelectionDetail})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail"/> class
            </summary>
            <param name="betId">The bet identifier</param>
            <param name="reason">The reason</param>
            <param name="alternativeStake">The alternative stake</param>
            <param name="reoffer">The reoffer</param>
            <param name="selectionDetails">The selection details</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail.#ctor(Sportradar.MTS.SDK.Entities.Internal.Dto.TicketResponse.Anonymous2)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.BetDetail"/> class
            </summary>
            <param name="betDetail">The bet detail</param>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.EndCustomer.Id">
            <summary>
            Gets the end user's unique id (in client's system)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection">
            <summary>
            Class Selection
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISelection" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.EventId">
            <summary>
            Gets the Betradar event (match or outright) id
            </summary>
            <value>The event identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.Id">
            <summary>
            Gets the selection id
            </summary>
            <value>Should be composed according to specification</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.Odds">
            <summary>
            Gets the odds multiplied by 10000 and rounded to int value
            </summary>
            <value>The odds</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.IsBanker">
            <summary>
            Gets a value indicating whether this instance is banker
            </summary>
            <value><c>true</c> if this instance is banker; otherwise, <c>false</c></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.BoostedOdds">
            <summary>
            Gets the boosted odds multiplied by 10000 and rounded to int value
            </summary>
            <remarks>It is optional value</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection.#ctor(System.String,System.String,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Selection"/> class
            </summary>
            <param name="eventId">The event identifier</param>
            <param name="id">The identifier</param>
            <param name="odds">The odds</param>
            <param name="isBanker">if set to <c>true</c> [is banker]</param>
            <param name="boostedOdds">Optional boosted odds</param>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.BookmakerId">
            <summary>
            Gets the ticket bookmaker id (client's id provided by Sportradar)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.Currency">
            <summary>
            Gets the 3 letter currency code
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.TerminalId">
            <summary>
            Gets the terminal id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.Channel">
            <summary>
            Gets the senders communication channel
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.ShopId">
            <summary>
            Gets the shop id
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.EndCustomer">
            <summary>
            Gets the identification of the end user (customer)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.LimitId">
            <summary>
            Gets the client's limit id (provided by Sportradar to the client)
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender.#ctor(System.Int32,System.String,System.String,Sportradar.MTS.SDK.Entities.Enums.SenderChannel,System.String,Sportradar.MTS.SDK.Entities.Interfaces.IEndCustomer,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Sender"/> class
            </summary>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="currency">The currency</param>
            <param name="terminalId">The terminal identifier</param>
            <param name="channel">The sender channel</param>
            <param name="shopId">The shop identifier</param>
            <param name="endCustomer">The customer</param>
            <param name="limitId">The limit identifier</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" /></summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicket" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.Bets">
            <summary>
            Gets the collection of all bets
            </summary>
            <value>The bets</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.Selections">
            <summary>
            Gets all of the ticket selections
            </summary>
            <value>Order is very important as they can be referenced by index</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.Sender">
            <summary>
            Gets the identification and settings of the ticket sender
            </summary>
            <value>The sender</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.ReofferId">
            <summary>
            Gets the reoffer reference ticket id
            </summary>
            <value>The reoffer identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.AltStakeRefId">
            <summary>
            Gets the alternative stake reference ticket id
            </summary>
            <value>The alt stake reference identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.TestSource">
            <summary>
            Gets a value indicating whether this is for testing
            </summary>
            <value><c>true</c> if [test source]; otherwise, <c>false</c></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.OddsChange">
            <summary>
            Gets the type of the odds change Accept change in odds (optional, default none)
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.None" />: default behavior
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Any" />: any odds change accepted
            <see cref="F:Sportradar.MTS.SDK.Entities.Enums.OddsChangeType.Higher" />: accept higher odds
            </summary>
            <value>The odds change</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.TotalCombinations">
            <summary>
            Gets the expected total number of generated combinations on this ticket (optional, default null). If present is used to validate against actual number of generated combinations.
            </summary>
            <value>The total combinations</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.LastMatchEndTime">
            <summary>
            Gets end time of last (non Sportradar) match on ticket.
            </summary>
            <value>End time of last (non Sportradar) match on ticket</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.PayCap">
            <summary>
            Capped max payout of the ticket
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket.#ctor(System.String,Sportradar.MTS.SDK.Entities.Interfaces.ISender,System.Collections.Generic.IEnumerable{Sportradar.MTS.SDK.Entities.Interfaces.IBet},System.String,System.String,System.Boolean,System.Nullable{Sportradar.MTS.SDK.Entities.Enums.OddsChangeType},System.Nullable{System.Int32},System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.Ticket"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="sender">The sender</param>
            <param name="bets">The bets</param>
            <param name="reofferId">The reoffer identifier</param>
            <param name="altStakeRefId">The alt stake reference identifier</param>
            <param name="isTestSource">if set to <c>true</c> [is test source]</param>
            <param name="oddsChangeType">Type of the odds change</param>
            <exception cref="T:System.ArgumentException">Only ReofferId or AltStakeRefId can specified</exception>
            <param name="totalCombinations">Expected total number of generated combinations on this ticket (optional, default null). If present is used to validate against actual number of generated combinations</param>
            <param name="lastMatchEndTime">End time of last (non Sportradar) match on ticket.</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketAck" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.TicketStatus">
            <summary>
            Gets the status of the ticket
            </summary>
            <value>The ticket status</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.Code">
            <summary>
            Get the code
            </summary>
            <value>The code</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.CorrelationId">
            <summary>
            Gets the correlation identifier.
            </summary>
            <value>The correlation identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.#ctor(System.String,System.Int32,Sportradar.MTS.SDK.Entities.Enums.TicketAckStatus,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="status">The status</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck.#ctor(Sportradar.MTS.SDK.Entities.Interfaces.ITicket,Sportradar.MTS.SDK.Entities.Enums.TicketAckStatus,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketAck"/> class
            </summary>
            <param name="ticket">The ticket</param>
            <param name="status">The status</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.Code">
            <summary>
            Gets the cancellation code
            </summary>
            <value>The code</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.CancelPercent">
            <summary>
            Gets the cancel percent
            </summary>
            <value>The cancel percent</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.BetCancels">
            <summary>
            Gets the list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/>
            </summary>
            <value>The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel.#ctor(System.String,System.Int32,Sportradar.MTS.SDK.Entities.Enums.TicketCancellationReason,System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="code">The code</param>
            <param name="percent">The percent of ticket to cancel</param>
            <param name="betCancels">The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCancel"/></param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancelAck" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.TicketCancelStatus">
            <summary>
            Gets the status of the ticket cancel
            </summary>
            <value>The ticket cancel status</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.Code">
            <summary>
            Gets the code
            </summary>
            <value>The code</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.Message">
            <summary>
            Gets the message.
            </summary>
            <value>The message</value>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.#ctor(System.String,System.Int32,Sportradar.MTS.SDK.Entities.Enums.TicketCancelAckStatus,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="status">The status</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck.#ctor(Sportradar.MTS.SDK.Entities.Interfaces.ITicketCancel,Sportradar.MTS.SDK.Entities.Enums.TicketCancelAckStatus,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancelAck"/> class
            </summary>
            <param name="ticket">The ticket</param>
            <param name="status">The status</param>
            <param name="code">The code</param>
            <param name="message">The message</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketCashout" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.CashoutStake">
            <summary>
            Gets the cashout stake
            </summary>
            <value>The cashout stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.CashoutPercent">
            <summary>
            Gets the cashout percent
            </summary>
            <value>The cashout percent</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.BetCashouts">
            <summary>
            Gets the list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout"/>
            </summary>
            <value>The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout"/></value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout.#ctor(System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int32},System.Collections.Generic.IReadOnlyCollection{Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout})">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCashout"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="stake">The cashout stake</param>
            <param name="percent">The cashout percent</param>
            <param name="betCashouts">The list of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.IBetCashout"/></param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.NonSrSettleStake">
            <summary>
            Gets the non-sportradar settle stake
            </summary>
            <value>The non-sportradar settle stake</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketNonSrSettle.#ctor(System.String,System.Int32,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketNonSrSettle"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
            <param name="stake">The non-sportradar settle stake</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel">
            <summary>
            Implementation of <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel"/>
            </summary>
            <seealso cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ITicketReofferCancel" />
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.Timestamp">
            <summary>
            Gets the timestamp of ticket placement (UTC)
            </summary>
            <value>The timestamp</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.TicketId">
            <summary>
            Gets the ticket id
            </summary>
            <value>Unique ticket id (in the client's system)</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.BookmakerId">
            <summary>
            Get the bookmaker id (client's id provided by Sportradar)
            </summary>
            <value>The bookmaker identifier</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.Version">
            <summary>
            Gets the ticket format version
            </summary>
            <value>The version</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.CorrelationId">
            <summary>
            Gets the correlation identifier
            </summary>
            <value>The correlation identifier</value>
            <remarks>Only used to relate ticket with its response</remarks>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketReofferCancel.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Sportradar.MTS.SDK.Entities.Internal.TicketImpl.TicketCancel"/> class
            </summary>
            <param name="ticketId">The ticket identifier</param>
            <param name="bookmakerId">The bookmaker identifier</param>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.ISdkConfiguration">
            <summary>
            Defines a contract implemented by classes representing configuration
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Username">
            <summary>
            Gets an username used when establishing connection to the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Password">
            <summary>
            Gets a password used when establishing connection to the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Host">
            <summary>
            Gets a value specifying the host name of the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Port">
            <summary>
            Gets the port used to connect to AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.VirtualHost">
            <summary>
            Gets a value specifying the virtual host name of the AMQP broker
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.UseSsl">
            <summary>
            Gets a value specifying whether the connection to AMQP broker should use SSL encryption
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.SslServerName">
            <summary>
            Gets the server name that will be used to check against SSL certificate
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.NodeId">
            <summary>
            Gets a nodeId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.BookmakerId">
            <summary>
            Gets the BookmakerId associated with the current configuration or 0 if none is provided
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.LimitId">
            <summary>
            Gets the channel identifier associated with the current configuration or 0 if none is provided
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Currency">
            <summary>
            Gets the default currency associated with the current configuration or a null reference if none is provided
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.Channel">
            <summary>
            Gets the <see cref="T:Sportradar.MTS.SDK.Entities.Enums.SenderChannel"/> specifying the associated channel or a null reference if none is specified
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.AccessToken">
            <summary>
            Gets the access token for the UF feed (only necessary if UF selections will be build)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.UfEnvironment">
            <summary>
            Gets the uf environment for the UF feed (only necessary if UF selections will be build)
            </summary>
            <value>The UF environment</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.ProvideAdditionalMarketSpecifiers">
            <summary>
            Gets a value indicating whether additional market specifiers should be added
            </summary>
            <value><c>true</c> if [provide additional market specifiers]; otherwise, <c>false</c></value>
            <remarks>If this is set to true and the user uses UOF markets, when there are special cases (market 215, or $score in SOV/SBV template), sdk automatically tries to add appropriate specifier; if set to false, user will need to add this manually</remarks>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.StatisticsEnabled">
            <summary>
            Gets a value indication whether statistics collection is enabled
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.StatisticsTimeout">
            <summary>
            Gets the timeout for automatically collecting statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.StatisticsRecordLimit">
            <summary>
            Gets the limit of records for automatically writing statistics
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.ExclusiveConsumer">
            <summary>
            Should the rabbit consumer channel be exclusive
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.KeycloakHost">
            <summary>
            Gets the Keycloak host for authorization
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.KeycloakUsername">
            <summary>
            Gets the username used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.KeycloakPassword">
            <summary>
            Gets the password used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.KeycloakSecret">
            <summary>
            Gets the secret used to connect authenticate to Keycloak
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.MtsClientApiHost">
            <summary>
            Gets the Client API host
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.TicketResponseTimeoutLive">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "live" selectionId
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.TicketResponseTimeoutPrematch">
            <summary>
            Gets the ticket response timeout(ms) for tickets using "prematch" selectionId
            </summary>
            <value>Gets the ticket response timeout(ms) for tickets using "prematch" selectionId</value>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.TicketCancellationResponseTimeout">
            <summary>
            Gets the ticket cancellation response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.TicketCashoutResponseTimeout">
            <summary>
            Gets the ticket cashout response timeout(ms)
            </summary>
        </member>
        <member name="P:Sportradar.MTS.SDK.Entities.ISdkConfiguration.TicketNonSrSettleResponseTimeout">
            <summary>
            Gets the ticket non-sportradar settle response timeout(ms)
            </summary>
        </member>
        <member name="T:Sportradar.MTS.SDK.Entities.Utils.JsonUtils">
            <summary>
            Helper class used to serialize tickets
            </summary>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Utils.JsonUtils.Serialize(Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket)">
            <summary>
            Serialize given ticket
            </summary>
            <param name="ticket">Ticket to be serialized</param>
            <returns>Json representation of the given ticket</returns>
        </member>
        <member name="M:Sportradar.MTS.SDK.Entities.Utils.JsonUtils.Deserialize``1(System.String)">
            <summary>
            Deserialize given ticket
            </summary>
            <param name="json">Json to be deserialized</param>
            <returns>Created <see cref="T:Sportradar.MTS.SDK.Entities.Interfaces.ISdkTicket"/> instance</returns>
        </member>
    </members>
</doc>
