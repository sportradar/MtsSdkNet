/*
 * Copyright (C) Sportradar AG. See LICENSE for full license governing this code
 */

//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v8.6.6263.34621 (http://NJsonSchema.org)
// </auto-generated>
//----------------------

using System.Collections.Generic;
using System.Collections.ObjectModel;

namespace Sportradar.MTS.SDK.Entities.Internal.Dto.ClientApi
{
#pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    internal partial class CcfResponseDTO : System.ComponentModel.INotifyPropertyChanged
    {
        private long _ccf;
        private IEnumerable<Anonymous> _sportCcfDetails = new Collection<Anonymous>();

        /// <summary>Customer Confidence Factor (factor multiplied by 10000)</summary>
        [Newtonsoft.Json.JsonProperty("ccf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Ccf
        {
            get { return _ccf; }
            set
            {
                if (_ccf != value)
                {
                    _ccf = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>CCF values for sport and prematch/live (if set for customer)</summary>
        [Newtonsoft.Json.JsonProperty("sportCcfDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IEnumerable<Anonymous> SportCcfDetails
        {
            get { return _sportCcfDetails; }
            set
            {
                if (_sportCcfDetails != value)
                {
                    _sportCcfDetails = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static CcfResponseDTO FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<CcfResponseDTO>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "8.6.6263.34621")]
    public partial class Anonymous : System.ComponentModel.INotifyPropertyChanged
    {
        private string _sportId;
        private long _prematchCcf;
        private long _liveCcf;

        /// <summary>Sport ID</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SportId
        {
            get { return _sportId; }
            set
            {
                if (_sportId != value)
                {
                    _sportId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Customer Confidence Factor for the sport for prematch selections (factor multiplied by 10000)</summary>
        [Newtonsoft.Json.JsonProperty("prematchCcf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long PrematchCcf
        {
            get { return _prematchCcf; }
            set
            {
                if (_prematchCcf != value)
                {
                    _prematchCcf = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Customer Confidence Factor for the sport for live selections (factor multiplied by 10000)</summary>
        [Newtonsoft.Json.JsonProperty("liveCcf", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long LiveCcf
        {
            get { return _liveCcf; }
            set
            {
                if (_liveCcf != value)
                {
                    _liveCcf = value;
                    RaisePropertyChanged();
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this);
        }

        public static Anonymous FromJson(string data)
        {
            return Newtonsoft.Json.JsonConvert.DeserializeObject<Anonymous>(data);
        }

        protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
        }
    }
}
